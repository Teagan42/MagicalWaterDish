
/Users/tglenn/src/particle/MagicalWaterDish/target/5.3.1/argon/MagicalWaterDish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002134  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6150  000b6150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000f4  2003e4f0  000b6174  0000e4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000020c  2003e5e4  2003e5e4  0001e5e4  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6268  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b626c  000b626c  0001626c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6272  000b6272  00016272  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6296  000b6296  00016296  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0012c519  00000000  00000000  0001629a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00014e85  00000000  00000000  001427b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00037910  00000000  00000000  00157638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002988  00000000  00000000  0018ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a140  00000000  00000000  001918d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fd74  00000000  00000000  0019ba10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00048d85  00000000  00000000  001db784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013fb7a  00000000  00000000  00224509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007560  00000000  00000000  00364084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 fcde 	bl	b59fe <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f001 fd00 	bl	b5a4e <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e4f0 	.word	0x2003e4f0
   b4058:	000b6174 	.word	0x000b6174
   b405c:	2003e5e4 	.word	0x2003e5e4
   b4060:	2003e5e4 	.word	0x2003e5e4
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f001 fadf 	bl	b5630 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b612c 	.word	0x000b612c
   b408c:	000b6150 	.word	0x000b6150

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b822 	b.w	b40d8 <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f82f 	bl	b40f8 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f001 ba7f 	b.w	b55a0 <_post_loop>

000b40a2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40a2:	f000 be6d 	b.w	b4d80 <malloc>

000b40a6 <_Znaj>:
   b40a6:	f000 be6b 	b.w	b4d80 <malloc>

000b40aa <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40aa:	f000 be71 	b.w	b4d90 <free>

000b40ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40ae:	7800      	ldrb	r0, [r0, #0]
   b40b0:	fab0 f080 	clz	r0, r0
   b40b4:	0940      	lsrs	r0, r0, #5
   b40b6:	4770      	bx	lr

000b40b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b8:	2301      	movs	r3, #1
   b40ba:	7003      	strb	r3, [r0, #0]
   b40bc:	4770      	bx	lr
	...

000b40c0 <_Z15openIntakeValvev>:
IntakeValve valveInlet(WATERING_INTAKE_VALVE_PIN, PinState::HIGH);
WaterIntakeSensor sensorInlets[] = {highWater, medWater, lowWater};
WaterIntakeBox box(&valveInlet, sensorInlets, 3); 

void openIntakeValve() {
    box.openValve();
   b40c0:	4801      	ldr	r0, [pc, #4]	; (b40c8 <_Z15openIntakeValvev+0x8>)
   b40c2:	f000 bb8b 	b.w	b47dc <_ZN14WaterIntakeBox9openValveEv>
   b40c6:	bf00      	nop
   b40c8:	2003e5e4 	.word	0x2003e5e4

000b40cc <_Z16closeIntakeValvev>:
}

void closeIntakeValve() {
    box.closeValve();
   b40cc:	4801      	ldr	r0, [pc, #4]	; (b40d4 <_Z16closeIntakeValvev+0x8>)
   b40ce:	f000 bb77 	b.w	b47c0 <_ZN14WaterIntakeBox10closeValveEv>
   b40d2:	bf00      	nop
   b40d4:	2003e5e4 	.word	0x2003e5e4

000b40d8 <setup>:
}

void setup() {
   b40d8:	b508      	push	{r3, lr}
    cleaningSystem.setup();
   b40da:	4805      	ldr	r0, [pc, #20]	; (b40f0 <setup+0x18>)
   b40dc:	f000 f8b0 	bl	b4240 <_ZN14CleaningSystem5setupEv>
    box.setup();
   b40e0:	4804      	ldr	r0, [pc, #16]	; (b40f4 <setup+0x1c>)
   b40e2:	f000 fc79 	bl	b49d8 <_ZN14WaterIntakeBox5setupEv>
    box.activate();
}
   b40e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    box.activate();
   b40ea:	4802      	ldr	r0, [pc, #8]	; (b40f4 <setup+0x1c>)
   b40ec:	f000 bc52 	b.w	b4994 <_ZN14WaterIntakeBox8activateEv>
   b40f0:	2003e608 	.word	0x2003e608
   b40f4:	2003e5e4 	.word	0x2003e5e4

000b40f8 <loop>:

void loop() {
   b40f8:	b508      	push	{r3, lr}
    cleaningSystem.loop();
   b40fa:	4805      	ldr	r0, [pc, #20]	; (b4110 <loop+0x18>)
   b40fc:	f000 f968 	bl	b43d0 <_ZN14CleaningSystem4loopEv>
    box.loop();
   b4100:	4804      	ldr	r0, [pc, #16]	; (b4114 <loop+0x1c>)
   b4102:	f000 fc5b 	bl	b49bc <_ZN14WaterIntakeBox4loopEv>
    delay(100);
   b4106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(100);
   b410a:	2064      	movs	r0, #100	; 0x64
   b410c:	f000 be68 	b.w	b4de0 <delay>
   b4110:	2003e608 	.word	0x2003e608
   b4114:	2003e5e4 	.word	0x2003e5e4

000b4118 <_GLOBAL__sub_I_servoDrain>:
   b4118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Drain servoDrain(CLEANING_DRAIN_SERVO_PIN);
   b411a:	4f2d      	ldr	r7, [pc, #180]	; (b41d0 <_GLOBAL__sub_I_servoDrain+0xb8>)
InjectionPump injectionPump(CLEANING_INJECTION_PUMP_PIN, PinState::HIGH);
   b411c:	4e2d      	ldr	r6, [pc, #180]	; (b41d4 <_GLOBAL__sub_I_servoDrain+0xbc>)
IntakeValve cleaningIntakeVale(CLEANING_INTAKE_VALVE_PIN, PinState::HIGH);
   b411e:	4d2e      	ldr	r5, [pc, #184]	; (b41d8 <_GLOBAL__sub_I_servoDrain+0xc0>)
Drain servoDrain(CLEANING_DRAIN_SERVO_PIN);
   b4120:	2102      	movs	r1, #2
   b4122:	4638      	mov	r0, r7
   b4124:	f000 f994 	bl	b4450 <_ZN5DrainC1Ei>
InjectionPump injectionPump(CLEANING_INJECTION_PUMP_PIN, PinState::HIGH);
   b4128:	2201      	movs	r2, #1
   b412a:	4611      	mov	r1, r2
   b412c:	4630      	mov	r0, r6
   b412e:	f000 f9a1 	bl	b4474 <_ZN13InjectionPumpC1Ei8PinState>
IntakeValve cleaningIntakeVale(CLEANING_INTAKE_VALVE_PIN, PinState::HIGH);
   b4132:	2201      	movs	r2, #1
   b4134:	2100      	movs	r1, #0
   b4136:	4628      	mov	r0, r5
   b4138:	f000 f9d4 	bl	b44e4 <_ZN11IntakeValveC1Ei8PinState>
CleaningCycle cycles[] = {cycle1, cycle2, cycle3, cycle4, cycle5};
   b413c:	4a27      	ldr	r2, [pc, #156]	; (b41dc <_GLOBAL__sub_I_servoDrain+0xc4>)
   b413e:	4b28      	ldr	r3, [pc, #160]	; (b41e0 <_GLOBAL__sub_I_servoDrain+0xc8>)
   b4140:	ca07      	ldmia	r2, {r0, r1, r2}
   b4142:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b4146:	4a27      	ldr	r2, [pc, #156]	; (b41e4 <_GLOBAL__sub_I_servoDrain+0xcc>)
   b4148:	ca07      	ldmia	r2, {r0, r1, r2}
   b414a:	f103 040c 	add.w	r4, r3, #12
   b414e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b4152:	4a25      	ldr	r2, [pc, #148]	; (b41e8 <_GLOBAL__sub_I_servoDrain+0xd0>)
   b4154:	ca07      	ldmia	r2, {r0, r1, r2}
   b4156:	f103 0418 	add.w	r4, r3, #24
   b415a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b415e:	4a23      	ldr	r2, [pc, #140]	; (b41ec <_GLOBAL__sub_I_servoDrain+0xd4>)
   b4160:	ca07      	ldmia	r2, {r0, r1, r2}
   b4162:	f103 0424 	add.w	r4, r3, #36	; 0x24
   b4166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   b416a:	4a21      	ldr	r2, [pc, #132]	; (b41f0 <_GLOBAL__sub_I_servoDrain+0xd8>)
   b416c:	ca07      	ldmia	r2, {r0, r1, r2}
   b416e:	f103 0430 	add.w	r4, r3, #48	; 0x30
   b4172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
);
   b4176:	2401      	movs	r4, #1
   b4178:	e9cd 7400 	strd	r7, r4, [sp]
IntakeValve valveInlet(WATERING_INTAKE_VALVE_PIN, PinState::HIGH);
   b417c:	4f1d      	ldr	r7, [pc, #116]	; (b41f4 <_GLOBAL__sub_I_servoDrain+0xdc>)
);
   b417e:	481e      	ldr	r0, [pc, #120]	; (b41f8 <_GLOBAL__sub_I_servoDrain+0xe0>)
   b4180:	4632      	mov	r2, r6
   b4182:	4629      	mov	r1, r5
WaterIntakeSensor sensorInlets[] = {highWater, medWater, lowWater};
   b4184:	4d1d      	ldr	r5, [pc, #116]	; (b41fc <_GLOBAL__sub_I_servoDrain+0xe4>)
   b4186:	4e1e      	ldr	r6, [pc, #120]	; (b4200 <_GLOBAL__sub_I_servoDrain+0xe8>)
);
   b4188:	f000 f842 	bl	b4210 <_ZN14CleaningSystemC1EP11IntakeValveP13InjectionPumpP13CleaningCycleP5Drainj>
IntakeValve valveInlet(WATERING_INTAKE_VALVE_PIN, PinState::HIGH);
   b418c:	4622      	mov	r2, r4
   b418e:	2104      	movs	r1, #4
   b4190:	4638      	mov	r0, r7
   b4192:	f000 f9a7 	bl	b44e4 <_ZN11IntakeValveC1Ei8PinState>
WaterIntakeSensor sensorInlets[] = {highWater, medWater, lowWater};
   b4196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4198:	4634      	mov	r4, r6
   b419a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b419c:	682b      	ldr	r3, [r5, #0]
   b419e:	4d19      	ldr	r5, [pc, #100]	; (b4204 <_GLOBAL__sub_I_servoDrain+0xec>)
   b41a0:	6023      	str	r3, [r4, #0]
   b41a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b41a4:	f106 0414 	add.w	r4, r6, #20
   b41a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b41aa:	682b      	ldr	r3, [r5, #0]
   b41ac:	4d16      	ldr	r5, [pc, #88]	; (b4208 <_GLOBAL__sub_I_servoDrain+0xf0>)
   b41ae:	6023      	str	r3, [r4, #0]
   b41b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b41b2:	f106 0428 	add.w	r4, r6, #40	; 0x28
   b41b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b41b8:	682b      	ldr	r3, [r5, #0]
WaterIntakeBox box(&valveInlet, sensorInlets, 3); 
   b41ba:	4814      	ldr	r0, [pc, #80]	; (b420c <_GLOBAL__sub_I_servoDrain+0xf4>)
WaterIntakeSensor sensorInlets[] = {highWater, medWater, lowWater};
   b41bc:	6023      	str	r3, [r4, #0]
WaterIntakeBox box(&valveInlet, sensorInlets, 3); 
   b41be:	4632      	mov	r2, r6
   b41c0:	2303      	movs	r3, #3
   b41c2:	4639      	mov	r1, r7
   b41c4:	b003      	add	sp, #12
   b41c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
WaterIntakeBox box(&valveInlet, sensorInlets, 3); 
   b41ca:	f000 bb2b 	b.w	b4824 <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori>
   b41ce:	bf00      	nop
   b41d0:	2003e6a8 	.word	0x2003e6a8
   b41d4:	2003e664 	.word	0x2003e664
   b41d8:	2003e600 	.word	0x2003e600
   b41dc:	2003e4f0 	.word	0x2003e4f0
   b41e0:	2003e628 	.word	0x2003e628
   b41e4:	2003e4fc 	.word	0x2003e4fc
   b41e8:	2003e508 	.word	0x2003e508
   b41ec:	2003e514 	.word	0x2003e514
   b41f0:	2003e520 	.word	0x2003e520
   b41f4:	2003e6b0 	.word	0x2003e6b0
   b41f8:	2003e608 	.word	0x2003e608
   b41fc:	2003e53c 	.word	0x2003e53c
   b4200:	2003e66c 	.word	0x2003e66c
   b4204:	2003e564 	.word	0x2003e564
   b4208:	2003e550 	.word	0x2003e550
   b420c:	2003e5e4 	.word	0x2003e5e4

000b4210 <_ZN14CleaningSystemC1EP11IntakeValveP13InjectionPumpP13CleaningCycleP5Drainj>:
#include "CleaningSystem.h"

CleaningSystem::CleaningSystem(IntakeValve *intakeValve, InjectionPump *injectionPump, CleaningCycle *cleaningCycle, Drain *drains, unsigned int drainCount)
   b4210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4212:	4604      	mov	r4, r0
   b4214:	461d      	mov	r5, r3
   b4216:	460f      	mov	r7, r1
   b4218:	4616      	mov	r6, r2
{
    Serial.println("Cleaning System : Initializing");
   b421a:	f001 f93b 	bl	b5494 <_Z16_fetch_usbserialv>
   b421e:	4907      	ldr	r1, [pc, #28]	; (b423c <_ZN14CleaningSystemC1EP11IntakeValveP13InjectionPumpP13CleaningCycleP5Drainj+0x2c>)
   b4220:	f001 f807 	bl	b5232 <_ZN5Print7printlnEPKc>
    this->_intakeValve = intakeValve;
    this->_injectionPump = injectionPump;
    this->_cycles = cleaningCycle;
    this->_activeCycle = nullptr;
   b4224:	2300      	movs	r3, #0
   b4226:	60e3      	str	r3, [r4, #12]
    this->_isActive = false;
   b4228:	7723      	strb	r3, [r4, #28]
    this->_drains = drains;
   b422a:	9b06      	ldr	r3, [sp, #24]
   b422c:	6123      	str	r3, [r4, #16]
    this->_drainCount = drainCount;
   b422e:	9b07      	ldr	r3, [sp, #28]
    this->_cycles = cleaningCycle;
   b4230:	60a5      	str	r5, [r4, #8]
    this->_injectionPump = injectionPump;
   b4232:	e9c4 7600 	strd	r7, r6, [r4]
    this->_drainCount = drainCount;
   b4236:	6163      	str	r3, [r4, #20]
};
   b4238:	4620      	mov	r0, r4
   b423a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b423c:	000b5b9c 	.word	0x000b5b9c

000b4240 <_ZN14CleaningSystem5setupEv>:

void CleaningSystem::setup()
{
   b4240:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4242:	4604      	mov	r4, r0
    Serial.println("Cleaning System : Setup");
   b4244:	f001 f926 	bl	b5494 <_Z16_fetch_usbserialv>
   b4248:	490d      	ldr	r1, [pc, #52]	; (b4280 <_ZN14CleaningSystem5setupEv+0x40>)
enum DrainState {
    OPEN,
    CLOSED
};

class Drain {
   b424a:	4e0e      	ldr	r6, [pc, #56]	; (b4284 <_ZN14CleaningSystem5setupEv+0x44>)
   b424c:	f000 fff1 	bl	b5232 <_ZN5Print7printlnEPKc>
    this->_intakeValve->setup();
   b4250:	6820      	ldr	r0, [r4, #0]
   b4252:	f000 f955 	bl	b4500 <_ZN11IntakeValve5setupEv>
    this->_injectionPump->setup();
   b4256:	6860      	ldr	r0, [r4, #4]
   b4258:	f000 f91a 	bl	b4490 <_ZN13InjectionPump5setupEv>
    for (unsigned int i = 0; i < this->_drainCount; i++)
   b425c:	2500      	movs	r5, #0
   b425e:	6963      	ldr	r3, [r4, #20]
   b4260:	42ab      	cmp	r3, r5
   b4262:	d90a      	bls.n	b427a <_ZN14CleaningSystem5setupEv+0x3a>
    {
        Drain drain = this->_drains[i];
   b4264:	6923      	ldr	r3, [r4, #16]
   b4266:	9600      	str	r6, [sp, #0]
   b4268:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
        drain.setup();
   b426c:	4668      	mov	r0, sp
   b426e:	685b      	ldr	r3, [r3, #4]
   b4270:	9301      	str	r3, [sp, #4]
    for (unsigned int i = 0; i < this->_drainCount; i++)
   b4272:	3501      	adds	r5, #1
        drain.setup();
   b4274:	f000 f8dc 	bl	b4430 <_ZN5Drain5setupEv>
    for (unsigned int i = 0; i < this->_drainCount; i++)
   b4278:	e7f1      	b.n	b425e <_ZN14CleaningSystem5setupEv+0x1e>
    }
};
   b427a:	b002      	add	sp, #8
   b427c:	bd70      	pop	{r4, r5, r6, pc}
   b427e:	bf00      	nop
   b4280:	000b5bbb 	.word	0x000b5bbb
   b4284:	000b5c64 	.word	0x000b5c64

000b4288 <_ZN14CleaningSystem10openDrainsEv>:
        this->setActiveCycle(this->_activeCycle->next);
    }
};

void CleaningSystem::openDrains()
{
   b4288:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b428a:	4e09      	ldr	r6, [pc, #36]	; (b42b0 <_ZN14CleaningSystem10openDrainsEv+0x28>)
   b428c:	4605      	mov	r5, r0
    for (unsigned int i = 0; i < this->_drainCount; i++)
   b428e:	2400      	movs	r4, #0
   b4290:	696b      	ldr	r3, [r5, #20]
   b4292:	42a3      	cmp	r3, r4
   b4294:	d90a      	bls.n	b42ac <_ZN14CleaningSystem10openDrainsEv+0x24>
    {
        Drain drain = this->_drains[i];
   b4296:	692b      	ldr	r3, [r5, #16]
   b4298:	9600      	str	r6, [sp, #0]
   b429a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
        drain.openDrain();
   b429e:	4668      	mov	r0, sp
   b42a0:	685b      	ldr	r3, [r3, #4]
   b42a2:	9301      	str	r3, [sp, #4]
    for (unsigned int i = 0; i < this->_drainCount; i++)
   b42a4:	3401      	adds	r4, #1
        drain.openDrain();
   b42a6:	f000 f8b7 	bl	b4418 <_ZN5Drain10closeDrainEv>
    for (unsigned int i = 0; i < this->_drainCount; i++)
   b42aa:	e7f1      	b.n	b4290 <_ZN14CleaningSystem10openDrainsEv+0x8>
    }
};
   b42ac:	b002      	add	sp, #8
   b42ae:	bd70      	pop	{r4, r5, r6, pc}
   b42b0:	000b5c64 	.word	0x000b5c64

000b42b4 <_ZN14CleaningSystem11closeDrainsEv>:

void CleaningSystem::closeDrains()
{
   b42b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42b6:	4e09      	ldr	r6, [pc, #36]	; (b42dc <_ZN14CleaningSystem11closeDrainsEv+0x28>)
   b42b8:	4605      	mov	r5, r0
    for (unsigned int i = 0; i < this->_drainCount; i++)
   b42ba:	2400      	movs	r4, #0
   b42bc:	696b      	ldr	r3, [r5, #20]
   b42be:	42a3      	cmp	r3, r4
   b42c0:	d90a      	bls.n	b42d8 <_ZN14CleaningSystem11closeDrainsEv+0x24>
    {
        Drain drain = this->_drains[i];
   b42c2:	692b      	ldr	r3, [r5, #16]
   b42c4:	9600      	str	r6, [sp, #0]
   b42c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
        drain.closeDrain();
   b42ca:	4668      	mov	r0, sp
   b42cc:	685b      	ldr	r3, [r3, #4]
   b42ce:	9301      	str	r3, [sp, #4]
    for (unsigned int i = 0; i < this->_drainCount; i++)
   b42d0:	3401      	adds	r4, #1
        drain.closeDrain();
   b42d2:	f000 f8a1 	bl	b4418 <_ZN5Drain10closeDrainEv>
    for (unsigned int i = 0; i < this->_drainCount; i++)
   b42d6:	e7f1      	b.n	b42bc <_ZN14CleaningSystem11closeDrainsEv+0x8>
    }
};
   b42d8:	b002      	add	sp, #8
   b42da:	bd70      	pop	{r4, r5, r6, pc}
   b42dc:	000b5c64 	.word	0x000b5c64

000b42e0 <_ZN14CleaningSystem12onCycleStartEP13CleaningCycle>:
        break;
    }
};

void CleaningSystem::onCycleStart(CleaningCycle *cycle)
{
   b42e0:	b538      	push	{r3, r4, r5, lr}
   b42e2:	4604      	mov	r4, r0
   b42e4:	460d      	mov	r5, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b42e6:	f000 fbb7 	bl	b4a58 <HAL_Timer_Get_Milli_Seconds>
    this->_cycleStartedAt = millis();
   b42ea:	61a0      	str	r0, [r4, #24]
    switch (cycle->cycle)
   b42ec:	782b      	ldrb	r3, [r5, #0]
   b42ee:	2b04      	cmp	r3, #4
   b42f0:	d81f      	bhi.n	b4332 <_ZN14CleaningSystem12onCycleStartEP13CleaningCycle+0x52>
   b42f2:	e8df f003 	tbb	[pc, r3]
   b42f6:	1a0e      	.short	0x1a0e
   b42f8:	1603      	.short	0x1603
   b42fa:	1a          	.byte	0x1a
   b42fb:	00          	.byte	0x00
    {
    case Cleaning::DRAIN:
        this->openDrains();
   b42fc:	4620      	mov	r0, r4
   b42fe:	f7ff ffc3 	bl	b4288 <_ZN14CleaningSystem10openDrainsEv>
        this->_injectionPump->turnOff();
        this->_intakeValve->open();
        break;
    case Cleaning::SOAK:
        this->closeDrains();
        this->_injectionPump->turnOff();
   b4302:	6860      	ldr	r0, [r4, #4]
   b4304:	f000 f8d2 	bl	b44ac <_ZN13InjectionPump7turnOffEv>
        this->_intakeValve->close();
   b4308:	6820      	ldr	r0, [r4, #0]
        this->_intakeValve->close();
        break;
    default:
        break;
    }
};
   b430a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        this->_intakeValve->close();
   b430e:	f000 b913 	b.w	b4538 <_ZN11IntakeValve5closeEv>
        this->_injectionPump->turnOn();
   b4312:	6860      	ldr	r0, [r4, #4]
   b4314:	f000 f8d8 	bl	b44c8 <_ZN13InjectionPump6turnOnEv>
        this->_intakeValve->open();
   b4318:	6820      	ldr	r0, [r4, #0]
};
   b431a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        this->_intakeValve->open();
   b431e:	f000 b8fd 	b.w	b451c <_ZN11IntakeValve4openEv>
        this->_injectionPump->turnOff();
   b4322:	6860      	ldr	r0, [r4, #4]
   b4324:	f000 f8c2 	bl	b44ac <_ZN13InjectionPump7turnOffEv>
   b4328:	e7f6      	b.n	b4318 <_ZN14CleaningSystem12onCycleStartEP13CleaningCycle+0x38>
        this->closeDrains();
   b432a:	4620      	mov	r0, r4
   b432c:	f7ff ffc2 	bl	b42b4 <_ZN14CleaningSystem11closeDrainsEv>
   b4330:	e7e7      	b.n	b4302 <_ZN14CleaningSystem12onCycleStartEP13CleaningCycle+0x22>
};
   b4332:	bd38      	pop	{r3, r4, r5, pc}

000b4334 <_ZN14CleaningSystem10deactivateEv>:
    this->_isActive = true;
    this->setActiveCycle(this->_cycles);
};

void CleaningSystem::deactivate()
{
   b4334:	b510      	push	{r4, lr}
   b4336:	4604      	mov	r4, r0
    Serial.println("Cleaning System : Deactivate");
   b4338:	f001 f8ac 	bl	b5494 <_Z16_fetch_usbserialv>
   b433c:	4903      	ldr	r1, [pc, #12]	; (b434c <_ZN14CleaningSystem10deactivateEv+0x18>)
   b433e:	f000 ff78 	bl	b5232 <_ZN5Print7printlnEPKc>
    this->_cycleStartedAt = 0;
   b4342:	2300      	movs	r3, #0
   b4344:	61a3      	str	r3, [r4, #24]
    this->_activeCycle = nullptr;
   b4346:	60e3      	str	r3, [r4, #12]
    this->_isActive = false;
   b4348:	7723      	strb	r3, [r4, #28]
};
   b434a:	bd10      	pop	{r4, pc}
   b434c:	000b5bd3 	.word	0x000b5bd3

000b4350 <_ZN14CleaningSystem10onCycleEndEP13CleaningCycle>:
    this->_cycleStartedAt = 0;
   b4350:	2300      	movs	r3, #0
{
   b4352:	b510      	push	{r4, lr}
    this->_cycleStartedAt = 0;
   b4354:	6183      	str	r3, [r0, #24]
    switch (cycle->cycle)
   b4356:	780b      	ldrb	r3, [r1, #0]
{
   b4358:	4604      	mov	r4, r0
   b435a:	2b04      	cmp	r3, #4
   b435c:	d81b      	bhi.n	b4396 <_ZN14CleaningSystem10onCycleEndEP13CleaningCycle+0x46>
   b435e:	e8df f003 	tbb	[pc, r3]
   b4362:	0707      	.short	0x0707
   b4364:	0703      	.short	0x0703
   b4366:	0f          	.byte	0x0f
   b4367:	00          	.byte	0x00
};
   b4368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        this->closeDrains();
   b436c:	f7ff bfa2 	b.w	b42b4 <_ZN14CleaningSystem11closeDrainsEv>
        this->_injectionPump->turnOff();
   b4370:	6840      	ldr	r0, [r0, #4]
   b4372:	f000 f89b 	bl	b44ac <_ZN13InjectionPump7turnOffEv>
        this->_intakeValve->close();
   b4376:	6820      	ldr	r0, [r4, #0]
};
   b4378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        this->_intakeValve->close();
   b437c:	f000 b8dc 	b.w	b4538 <_ZN11IntakeValve5closeEv>
        this->_injectionPump->turnOff();
   b4380:	6840      	ldr	r0, [r0, #4]
   b4382:	f000 f893 	bl	b44ac <_ZN13InjectionPump7turnOffEv>
        this->_intakeValve->close();
   b4386:	6820      	ldr	r0, [r4, #0]
   b4388:	f000 f8d6 	bl	b4538 <_ZN11IntakeValve5closeEv>
        this->deactivate();
   b438c:	4620      	mov	r0, r4
};
   b438e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        this->deactivate();
   b4392:	f7ff bfcf 	b.w	b4334 <_ZN14CleaningSystem10deactivateEv>
};
   b4396:	bd10      	pop	{r4, pc}

000b4398 <_ZN14CleaningSystem14setActiveCycleEP13CleaningCycle>:
{
   b4398:	b538      	push	{r3, r4, r5, lr}
   b439a:	4604      	mov	r4, r0
   b439c:	460d      	mov	r5, r1
    Serial.println("Cleaning System : Set Active Cycle");
   b439e:	f001 f879 	bl	b5494 <_Z16_fetch_usbserialv>
   b43a2:	490a      	ldr	r1, [pc, #40]	; (b43cc <_ZN14CleaningSystem14setActiveCycleEP13CleaningCycle+0x34>)
   b43a4:	f000 ff45 	bl	b5232 <_ZN5Print7printlnEPKc>
    if (this->_activeCycle != nullptr)
   b43a8:	68e1      	ldr	r1, [r4, #12]
   b43aa:	b111      	cbz	r1, b43b2 <_ZN14CleaningSystem14setActiveCycleEP13CleaningCycle+0x1a>
        this->onCycleEnd(this->_activeCycle);
   b43ac:	4620      	mov	r0, r4
   b43ae:	f7ff ffcf 	bl	b4350 <_ZN14CleaningSystem10onCycleEndEP13CleaningCycle>
    this->_activeCycle = cycle;
   b43b2:	60e5      	str	r5, [r4, #12]
    if (this->_activeCycle == nullptr)
   b43b4:	b925      	cbnz	r5, b43c0 <_ZN14CleaningSystem14setActiveCycleEP13CleaningCycle+0x28>
        this->deactivate();
   b43b6:	4620      	mov	r0, r4
};
   b43b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        this->deactivate();
   b43bc:	f7ff bfba 	b.w	b4334 <_ZN14CleaningSystem10deactivateEv>
        this->onCycleStart(this->_activeCycle);
   b43c0:	4629      	mov	r1, r5
   b43c2:	4620      	mov	r0, r4
};
   b43c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        this->onCycleStart(this->_activeCycle);
   b43c8:	f7ff bf8a 	b.w	b42e0 <_ZN14CleaningSystem12onCycleStartEP13CleaningCycle>
   b43cc:	000b5bf0 	.word	0x000b5bf0

000b43d0 <_ZN14CleaningSystem4loopEv>:
{
   b43d0:	b510      	push	{r4, lr}
   b43d2:	4604      	mov	r4, r0
    Serial.println("Cleaning System : Loop");
   b43d4:	f001 f85e 	bl	b5494 <_Z16_fetch_usbserialv>
   b43d8:	490e      	ldr	r1, [pc, #56]	; (b4414 <_ZN14CleaningSystem4loopEv+0x44>)
   b43da:	f000 ff2a 	bl	b5232 <_ZN5Print7printlnEPKc>
    if (!this->_isActive || this->_activeCycle == nullptr)
   b43de:	7f23      	ldrb	r3, [r4, #28]
   b43e0:	b10b      	cbz	r3, b43e6 <_ZN14CleaningSystem4loopEv+0x16>
   b43e2:	68e3      	ldr	r3, [r4, #12]
   b43e4:	b923      	cbnz	r3, b43f0 <_ZN14CleaningSystem4loopEv+0x20>
        deactivate();
   b43e6:	4620      	mov	r0, r4
};
   b43e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        deactivate();
   b43ec:	f7ff bfa2 	b.w	b4334 <_ZN14CleaningSystem10deactivateEv>
    if (this->_cycleStartedAt > 0 && millis() - this->_cycleStartedAt >= this->_activeCycle->duration)
   b43f0:	69a3      	ldr	r3, [r4, #24]
   b43f2:	b16b      	cbz	r3, b4410 <_ZN14CleaningSystem4loopEv+0x40>
   b43f4:	f000 fb30 	bl	b4a58 <HAL_Timer_Get_Milli_Seconds>
   b43f8:	69a2      	ldr	r2, [r4, #24]
   b43fa:	68e3      	ldr	r3, [r4, #12]
   b43fc:	1a80      	subs	r0, r0, r2
   b43fe:	685a      	ldr	r2, [r3, #4]
   b4400:	4290      	cmp	r0, r2
   b4402:	d305      	bcc.n	b4410 <_ZN14CleaningSystem4loopEv+0x40>
        this->setActiveCycle(this->_activeCycle->next);
   b4404:	4620      	mov	r0, r4
   b4406:	6899      	ldr	r1, [r3, #8]
};
   b4408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        this->setActiveCycle(this->_activeCycle->next);
   b440c:	f7ff bfc4 	b.w	b4398 <_ZN14CleaningSystem14setActiveCycleEP13CleaningCycle>
};
   b4410:	bd10      	pop	{r4, pc}
   b4412:	bf00      	nop
   b4414:	000b5c13 	.word	0x000b5c13

000b4418 <_ZN5Drain10closeDrainEv>:
    return;
};

void Drain::openDrain() {
    return;
};
   b4418:	4770      	bx	lr
	...

000b441c <_ZN5Drain4loopEv>:
void Drain::loop() {
   b441c:	b508      	push	{r3, lr}
    Serial.println("Drain : Loop");
   b441e:	f001 f839 	bl	b5494 <_Z16_fetch_usbserialv>
};
   b4422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Drain : Loop");
   b4426:	4901      	ldr	r1, [pc, #4]	; (b442c <_ZN5Drain4loopEv+0x10>)
   b4428:	f000 bf03 	b.w	b5232 <_ZN5Print7printlnEPKc>
   b442c:	000b5c2a 	.word	0x000b5c2a

000b4430 <_ZN5Drain5setupEv>:
void Drain::setup() {
   b4430:	b510      	push	{r4, lr}
   b4432:	4604      	mov	r4, r0
    Serial.println("Drain : Setup");
   b4434:	f001 f82e 	bl	b5494 <_Z16_fetch_usbserialv>
   b4438:	4904      	ldr	r1, [pc, #16]	; (b444c <_ZN5Drain5setupEv+0x1c>)
   b443a:	f000 fefa 	bl	b5232 <_ZN5Print7printlnEPKc>
    pinMode(this->_pin, OUTPUT);
   b443e:	88a0      	ldrh	r0, [r4, #4]
   b4440:	2101      	movs	r1, #1
};
   b4442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pinMode(this->_pin, OUTPUT);
   b4446:	f001 b963 	b.w	b5710 <pinMode>
   b444a:	bf00      	nop
   b444c:	000b5c37 	.word	0x000b5c37

000b4450 <_ZN5DrainC1Ei>:
Drain::Drain(int pin) {
   b4450:	b538      	push	{r3, r4, r5, lr}
   b4452:	4b06      	ldr	r3, [pc, #24]	; (b446c <_ZN5DrainC1Ei+0x1c>)
   b4454:	6003      	str	r3, [r0, #0]
   b4456:	4604      	mov	r4, r0
   b4458:	460d      	mov	r5, r1
    Serial.println("Drain : Initializating");
   b445a:	f001 f81b 	bl	b5494 <_Z16_fetch_usbserialv>
   b445e:	4904      	ldr	r1, [pc, #16]	; (b4470 <_ZN5DrainC1Ei+0x20>)
   b4460:	f000 fee7 	bl	b5232 <_ZN5Print7printlnEPKc>
    this->_pin = pin;
   b4464:	6065      	str	r5, [r4, #4]
};
   b4466:	4620      	mov	r0, r4
   b4468:	bd38      	pop	{r3, r4, r5, pc}
   b446a:	bf00      	nop
   b446c:	000b5c64 	.word	0x000b5c64
   b4470:	000b5c45 	.word	0x000b5c45

000b4474 <_ZN13InjectionPumpC1Ei8PinState>:
#include "InjectionPump.h"

InjectionPump::InjectionPump(int pin, PinState activePinState) : RelayDevice(pin, activePinState) {
   b4474:	b510      	push	{r4, lr}
   b4476:	4604      	mov	r4, r0
   b4478:	f000 f86c 	bl	b4554 <_ZN11RelayDeviceC1Ei8PinState>
    Serial.println("Injjection Pump : Intializing");
   b447c:	f001 f80a 	bl	b5494 <_Z16_fetch_usbserialv>
   b4480:	4902      	ldr	r1, [pc, #8]	; (b448c <_ZN13InjectionPumpC1Ei8PinState+0x18>)
   b4482:	f000 fed6 	bl	b5232 <_ZN5Print7printlnEPKc>
};
   b4486:	4620      	mov	r0, r4
   b4488:	bd10      	pop	{r4, pc}
   b448a:	bf00      	nop
   b448c:	000b5c74 	.word	0x000b5c74

000b4490 <_ZN13InjectionPump5setupEv>:

void InjectionPump::setup() {
   b4490:	b510      	push	{r4, lr}
   b4492:	4604      	mov	r4, r0
    Serial.println("Injection Pump : Setup");
   b4494:	f000 fffe 	bl	b5494 <_Z16_fetch_usbserialv>
   b4498:	4903      	ldr	r1, [pc, #12]	; (b44a8 <_ZN13InjectionPump5setupEv+0x18>)
   b449a:	f000 feca 	bl	b5232 <_ZN5Print7printlnEPKc>
    RelayDevice::setup();
   b449e:	4620      	mov	r0, r4
};
   b44a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RelayDevice::setup();
   b44a4:	f000 b868 	b.w	b4578 <_ZN11RelayDevice5setupEv>
   b44a8:	000b5c92 	.word	0x000b5c92

000b44ac <_ZN13InjectionPump7turnOffEv>:
void InjectionPump::loop() {
    Serial.println("Injection Pump : Loop");
    RelayDevice::loop();
};

void InjectionPump::turnOff() {
   b44ac:	b510      	push	{r4, lr}
   b44ae:	4604      	mov	r4, r0
    Serial.println("Injection Pump : Turn Off");
   b44b0:	f000 fff0 	bl	b5494 <_Z16_fetch_usbserialv>
   b44b4:	4903      	ldr	r1, [pc, #12]	; (b44c4 <_ZN13InjectionPump7turnOffEv+0x18>)
   b44b6:	f000 febc 	bl	b5232 <_ZN5Print7printlnEPKc>
    RelayDevice::open();
   b44ba:	4620      	mov	r0, r4
};
   b44bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RelayDevice::open();
   b44c0:	f000 b880 	b.w	b45c4 <_ZN11RelayDevice4openEv>
   b44c4:	000b5ca9 	.word	0x000b5ca9

000b44c8 <_ZN13InjectionPump6turnOnEv>:

void InjectionPump::turnOn() {
   b44c8:	b510      	push	{r4, lr}
   b44ca:	4604      	mov	r4, r0
    Serial.println("Injection Pump : Turn On");
   b44cc:	f000 ffe2 	bl	b5494 <_Z16_fetch_usbserialv>
   b44d0:	4903      	ldr	r1, [pc, #12]	; (b44e0 <_ZN13InjectionPump6turnOnEv+0x18>)
   b44d2:	f000 feae 	bl	b5232 <_ZN5Print7printlnEPKc>
    RelayDevice::close();
   b44d6:	4620      	mov	r0, r4
   b44d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RelayDevice::close();
   b44dc:	f000 b862 	b.w	b45a4 <_ZN11RelayDevice5closeEv>
   b44e0:	000b5cc3 	.word	0x000b5cc3

000b44e4 <_ZN11IntakeValveC1Ei8PinState>:
#include "IntakeValve.h"

IntakeValve::IntakeValve(int pin, PinState activePinState) : RelayDevice(pin, activePinState) {
   b44e4:	b510      	push	{r4, lr}
   b44e6:	4604      	mov	r4, r0
   b44e8:	f000 f834 	bl	b4554 <_ZN11RelayDeviceC1Ei8PinState>
    Serial.println("Intake Valve : Intializing");
   b44ec:	f000 ffd2 	bl	b5494 <_Z16_fetch_usbserialv>
   b44f0:	4902      	ldr	r1, [pc, #8]	; (b44fc <_ZN11IntakeValveC1Ei8PinState+0x18>)
   b44f2:	f000 fe9e 	bl	b5232 <_ZN5Print7printlnEPKc>
};
   b44f6:	4620      	mov	r0, r4
   b44f8:	bd10      	pop	{r4, pc}
   b44fa:	bf00      	nop
   b44fc:	000b5cdc 	.word	0x000b5cdc

000b4500 <_ZN11IntakeValve5setupEv>:

void IntakeValve::setup() {
   b4500:	b510      	push	{r4, lr}
   b4502:	4604      	mov	r4, r0
    Serial.println("Intake Valve : Setup");
   b4504:	f000 ffc6 	bl	b5494 <_Z16_fetch_usbserialv>
   b4508:	4903      	ldr	r1, [pc, #12]	; (b4518 <_ZN11IntakeValve5setupEv+0x18>)
   b450a:	f000 fe92 	bl	b5232 <_ZN5Print7printlnEPKc>
    RelayDevice::setup();
   b450e:	4620      	mov	r0, r4
};
   b4510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RelayDevice::setup();
   b4514:	f000 b830 	b.w	b4578 <_ZN11RelayDevice5setupEv>
   b4518:	000b5cf7 	.word	0x000b5cf7

000b451c <_ZN11IntakeValve4openEv>:
void IntakeValve::loop() {
    Serial.println("Intake Valve : Loop");
    RelayDevice::loop();
};

void IntakeValve::open() {
   b451c:	b510      	push	{r4, lr}
   b451e:	4604      	mov	r4, r0
    Serial.println("Intake Valve : Open");
   b4520:	f000 ffb8 	bl	b5494 <_Z16_fetch_usbserialv>
   b4524:	4903      	ldr	r1, [pc, #12]	; (b4534 <_ZN11IntakeValve4openEv+0x18>)
   b4526:	f000 fe84 	bl	b5232 <_ZN5Print7printlnEPKc>
    RelayDevice::open();
   b452a:	4620      	mov	r0, r4
};
   b452c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RelayDevice::open();
   b4530:	f000 b848 	b.w	b45c4 <_ZN11RelayDevice4openEv>
   b4534:	000b5d0c 	.word	0x000b5d0c

000b4538 <_ZN11IntakeValve5closeEv>:

void IntakeValve::close() {
   b4538:	b510      	push	{r4, lr}
   b453a:	4604      	mov	r4, r0
    Serial.println("Intake Valve : Close");
   b453c:	f000 ffaa 	bl	b5494 <_Z16_fetch_usbserialv>
   b4540:	4903      	ldr	r1, [pc, #12]	; (b4550 <_ZN11IntakeValve5closeEv+0x18>)
   b4542:	f000 fe76 	bl	b5232 <_ZN5Print7printlnEPKc>
    RelayDevice::close();
   b4546:	4620      	mov	r0, r4
};
   b4548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RelayDevice::close();
   b454c:	f000 b82a 	b.w	b45a4 <_ZN11RelayDevice5closeEv>
   b4550:	000b5d20 	.word	0x000b5d20

000b4554 <_ZN11RelayDeviceC1Ei8PinState>:
#include <Arduino.h>
#include "Relay.h"

RelayDevice::RelayDevice(int pin, PinState closedPinState) {
   b4554:	b570      	push	{r4, r5, r6, lr}
   b4556:	4604      	mov	r4, r0
   b4558:	460e      	mov	r6, r1
   b455a:	4615      	mov	r5, r2
    Serial.println("Relay Device : Initializing");
   b455c:	f000 ff9a 	bl	b5494 <_Z16_fetch_usbserialv>
   b4560:	4904      	ldr	r1, [pc, #16]	; (b4574 <_ZN11RelayDeviceC1Ei8PinState+0x20>)
   b4562:	f000 fe66 	bl	b5232 <_ZN5Print7printlnEPKc>
    this->_pin = pin;
    this->_closedPinState = closedPinState;
    this->_state = Relay::OPEN;
   b4566:	2300      	movs	r3, #0
    this->_pin = pin;
   b4568:	6026      	str	r6, [r4, #0]
    this->_closedPinState = closedPinState;
   b456a:	7125      	strb	r5, [r4, #4]
    this->_state = Relay::OPEN;
   b456c:	7163      	strb	r3, [r4, #5]
};
   b456e:	4620      	mov	r0, r4
   b4570:	bd70      	pop	{r4, r5, r6, pc}
   b4572:	bf00      	nop
   b4574:	000b5d35 	.word	0x000b5d35

000b4578 <_ZN11RelayDevice5setupEv>:

void RelayDevice::setup() {
   b4578:	b510      	push	{r4, lr}
   b457a:	4604      	mov	r4, r0
    Serial.println("Relay Device : Setup");
   b457c:	f000 ff8a 	bl	b5494 <_Z16_fetch_usbserialv>
   b4580:	4907      	ldr	r1, [pc, #28]	; (b45a0 <_ZN11RelayDevice5setupEv+0x28>)
   b4582:	f000 fe56 	bl	b5232 <_ZN5Print7printlnEPKc>
    pinMode(this->_pin, OUTPUT);
   b4586:	8820      	ldrh	r0, [r4, #0]
   b4588:	2101      	movs	r1, #1
   b458a:	f001 f8c1 	bl	b5710 <pinMode>
    this->_state = digitalRead(this->_pin) == this->_closedPinState ? Relay::CLOSED : Relay::OPEN;
   b458e:	8820      	ldrh	r0, [r4, #0]
   b4590:	f001 f8e8 	bl	b5764 <digitalRead>
   b4594:	7923      	ldrb	r3, [r4, #4]
   b4596:	1a1b      	subs	r3, r3, r0
   b4598:	4258      	negs	r0, r3
   b459a:	4158      	adcs	r0, r3
   b459c:	7160      	strb	r0, [r4, #5]
};
   b459e:	bd10      	pop	{r4, pc}
   b45a0:	000b5d51 	.word	0x000b5d51

000b45a4 <_ZN11RelayDevice5closeEv>:

void RelayDevice::loop() {
    Serial.println("Relay Device : Loop");
};

void RelayDevice::close() {
   b45a4:	b510      	push	{r4, lr}
   b45a6:	4604      	mov	r4, r0
    Serial.println("Relay Device : Close");
   b45a8:	f000 ff74 	bl	b5494 <_Z16_fetch_usbserialv>
   b45ac:	4904      	ldr	r1, [pc, #16]	; (b45c0 <_ZN11RelayDevice5closeEv+0x1c>)
   b45ae:	f000 fe40 	bl	b5232 <_ZN5Print7printlnEPKc>
    digitalWrite(this->_pin, this->_closedPinState);
   b45b2:	7921      	ldrb	r1, [r4, #4]
   b45b4:	8820      	ldrh	r0, [r4, #0]
   b45b6:	f001 f8bc 	bl	b5732 <digitalWrite>
    this->_state = Relay::CLOSED;
   b45ba:	2301      	movs	r3, #1
   b45bc:	7163      	strb	r3, [r4, #5]
};
   b45be:	bd10      	pop	{r4, pc}
   b45c0:	000b5d66 	.word	0x000b5d66

000b45c4 <_ZN11RelayDevice4openEv>:

void RelayDevice::open() {
   b45c4:	b510      	push	{r4, lr}
   b45c6:	4604      	mov	r4, r0
    Serial.println("Relay Device : Open");
   b45c8:	f000 ff64 	bl	b5494 <_Z16_fetch_usbserialv>
   b45cc:	4906      	ldr	r1, [pc, #24]	; (b45e8 <_ZN11RelayDevice4openEv+0x24>)
   b45ce:	f000 fe30 	bl	b5232 <_ZN5Print7printlnEPKc>
    digitalWrite(this->_pin, !this->_closedPinState);
   b45d2:	7921      	ldrb	r1, [r4, #4]
   b45d4:	8820      	ldrh	r0, [r4, #0]
   b45d6:	fab1 f181 	clz	r1, r1
   b45da:	0949      	lsrs	r1, r1, #5
   b45dc:	f001 f8a9 	bl	b5732 <digitalWrite>
    this->_state = Relay::OPEN;
   b45e0:	2300      	movs	r3, #0
   b45e2:	7163      	strb	r3, [r4, #5]
   b45e4:	bd10      	pop	{r4, pc}
   b45e6:	bf00      	nop
   b45e8:	000b5d7b 	.word	0x000b5d7b

000b45ec <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   b45ec:	b5f0      	push	{r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   b45ee:	1e54      	subs	r4, r2, #1
   b45f0:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   b45f4:	ea4f 0c64 	mov.w	ip, r4, asr #1
   b45f8:	460c      	mov	r4, r1
   b45fa:	45a4      	cmp	ip, r4
   b45fc:	dd12      	ble.n	b4624 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0+0x38>
	{
	  __secondChild = 2 * (__secondChild + 1);
   b45fe:	1c65      	adds	r5, r4, #1
   b4600:	006d      	lsls	r5, r5, #1
	  if (__comp(__first + __secondChild,
   b4602:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
{
    Serial.println("Water Intake Box : Initializing");
    _intakeValve = valve;
    _sensors = toVector(sensors, count);
    std::sort(_sensors.begin(), _sensors.end(), [](WaterIntakeSensor* a, WaterIntakeSensor* b) {
        return a->waterLevel < b->waterLevel;
   b4606:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
   b460a:	f850 602e 	ldr.w	r6, [r0, lr, lsl #2]
   b460e:	68bf      	ldr	r7, [r7, #8]
   b4610:	68b6      	ldr	r6, [r6, #8]
		     __first + (__secondChild - 1)))
	    __secondChild--;
   b4612:	42b7      	cmp	r7, r6
   b4614:	bfb8      	it	lt
   b4616:	4675      	movlt	r5, lr
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   b4618:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
   b461c:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
	  __holeIndex = __secondChild;
   b4620:	462c      	mov	r4, r5
      while (__secondChild < (__len - 1) / 2)
   b4622:	e7ea      	b.n	b45fa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0+0xe>
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   b4624:	07d5      	lsls	r5, r2, #31
   b4626:	d40c      	bmi.n	b4642 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0+0x56>
   b4628:	3a02      	subs	r2, #2
   b462a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b462e:	ebb4 0f62 	cmp.w	r4, r2, asr #1
   b4632:	d106      	bne.n	b4642 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0+0x56>
	{
	  __secondChild = 2 * (__secondChild + 1);
   b4634:	0062      	lsls	r2, r4, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   b4636:	3201      	adds	r2, #1
   b4638:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
   b463c:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
   b4640:	4614      	mov	r4, r2
      _Distance __parent = (__holeIndex - 1) / 2;
   b4642:	1e62      	subs	r2, r4, #1
   b4644:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b4648:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   b464a:	42a1      	cmp	r1, r4
      { _M_current += __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
   b464c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   b4650:	eb00 0584 	add.w	r5, r0, r4, lsl #2
   b4654:	da0d      	bge.n	b4672 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0+0x86>

      template<typename _Iterator, typename _Value>
	_GLIBCXX20_CONSTEXPR
	bool
	operator()(_Iterator __it, _Value& __val)
	{ return bool(_M_comp(*__it, __val)); }
   b4656:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   b465a:	689e      	ldr	r6, [r3, #8]
   b465c:	68a7      	ldr	r7, [r4, #8]
   b465e:	42b7      	cmp	r7, r6
   b4660:	da07      	bge.n	b4672 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0+0x86>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   b4662:	f840 400c 	str.w	r4, [r0, ip]
	  __parent = (__holeIndex - 1) / 2;
   b4666:	1e54      	subs	r4, r2, #1
   b4668:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
   b466c:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
   b466e:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
   b4670:	e7eb      	b.n	b464a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0+0x5e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   b4672:	602b      	str	r3, [r5, #0]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
   b4674:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4676 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0>:
    _GLIBCXX20_CONSTEXPR
    void
    __insertion_sort(_RandomAccessIterator __first,
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
   b4676:	4288      	cmp	r0, r1
    __insertion_sort(_RandomAccessIterator __first,
   b4678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b467a:	4604      	mov	r4, r0
   b467c:	460e      	mov	r6, r1
      if (__first == __last) return;
   b467e:	d01e      	beq.n	b46be <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0+0x48>
   b4680:	1d05      	adds	r5, r0, #4

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   b4682:	42ae      	cmp	r6, r5
   b4684:	d01b      	beq.n	b46be <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0+0x48>
        { return bool(_M_comp(*__it1, *__it2)); }
   b4686:	682f      	ldr	r7, [r5, #0]
   b4688:	6823      	ldr	r3, [r4, #0]
	{
	  if (__comp(__i, __first))
   b468a:	68ba      	ldr	r2, [r7, #8]
   b468c:	689b      	ldr	r3, [r3, #8]
   b468e:	429a      	cmp	r2, r3
   b4690:	da09      	bge.n	b46a6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0+0x30>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b4692:	42ac      	cmp	r4, r5
   b4694:	d004      	beq.n	b46a0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0+0x2a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   b4696:	1b2a      	subs	r2, r5, r4
   b4698:	4621      	mov	r1, r4
   b469a:	1d20      	adds	r0, r4, #4
   b469c:	f001 f9bd 	bl	b5a1a <memmove>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
   b46a0:	6027      	str	r7, [r4, #0]
	return *this;
   b46a2:	3504      	adds	r5, #4
   b46a4:	e7ed      	b.n	b4682 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0+0xc>
   b46a6:	462b      	mov	r3, r5

      template<typename _Value, typename _Iterator>
	_GLIBCXX20_CONSTEXPR
	bool
	operator()(_Value& __val, _Iterator __it)
	{ return bool(_M_comp(__val, *__it)); }
   b46a8:	f853 2c04 	ldr.w	r2, [r3, #-4]
      while (__comp(__val, __next))
   b46ac:	68b8      	ldr	r0, [r7, #8]
   b46ae:	6891      	ldr	r1, [r2, #8]
   b46b0:	4288      	cmp	r0, r1
   b46b2:	da02      	bge.n	b46ba <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0+0x44>
	  *__last = _GLIBCXX_MOVE(*__next);
   b46b4:	f843 2904 	str.w	r2, [r3], #-4
	return *this;
   b46b8:	e7f6      	b.n	b46a8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0+0x32>
      *__last = _GLIBCXX_MOVE(__val);
   b46ba:	601f      	str	r7, [r3, #0]
   b46bc:	e7f1      	b.n	b46a2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0+0x2c>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
   b46be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b46c0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __introsort_loop(_RandomAccessIterator __first,
   b46c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b46c4:	4604      	mov	r4, r0
   b46c6:	4616      	mov	r6, r2
   b46c8:	4698      	mov	r8, r3
   b46ca:	460d      	mov	r5, r1
      { return __normal_iterator(_M_current + __n); }
   b46cc:	f100 0b04 	add.w	fp, r0, #4
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b46d0:	1b29      	subs	r1, r5, r4
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
   b46d2:	2940      	cmp	r1, #64	; 0x40
   b46d4:	dd63      	ble.n	b479e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0xde>
   b46d6:	ea4f 09a1 	mov.w	r9, r1, asr #2
	{
	  if (__depth_limit == 0)
   b46da:	b9ce      	cbnz	r6, b4710 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x50>

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
   b46dc:	f1a9 0102 	sub.w	r1, r9, #2
   b46e0:	1049      	asrs	r1, r1, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
   b46e2:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
   b46e6:	464a      	mov	r2, r9
   b46e8:	4620      	mov	r0, r4
   b46ea:	f7ff ff7f 	bl	b45ec <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0>
			     __comp);
	  if (__parent == 0)
   b46ee:	b109      	cbz	r1, b46f4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x34>
	    return;
	  __parent--;
   b46f0:	3901      	subs	r1, #1
      while (true)
   b46f2:	e7f6      	b.n	b46e2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x22>
   b46f4:	1b2b      	subs	r3, r5, r4
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
   b46f6:	2b04      	cmp	r3, #4
   b46f8:	dd51      	ble.n	b479e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0xde>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
   b46fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
      *__result = _GLIBCXX_MOVE(*__first);
   b46fe:	6822      	ldr	r2, [r4, #0]
   b4700:	602a      	str	r2, [r5, #0]
   b4702:	1b2a      	subs	r2, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
   b4704:	1092      	asrs	r2, r2, #2
   b4706:	2100      	movs	r1, #0
   b4708:	4620      	mov	r0, r4
   b470a:	f7ff ff6f 	bl	b45ec <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_T0_SH_T1_T2_.constprop.0>
      while (__last - __first > 1)
   b470e:	e7f1      	b.n	b46f4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x34>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   b4710:	10c9      	asrs	r1, r1, #3
        { return bool(_M_comp(*__it1, *__it2)); }
   b4712:	f8d4 9004 	ldr.w	r9, [r4, #4]
   b4716:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   b471a:	f8d9 a008 	ldr.w	sl, [r9, #8]
   b471e:	f8d0 e008 	ldr.w	lr, [r0, #8]
   b4722:	f855 cc04 	ldr.w	ip, [r5, #-4]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4726:	6822      	ldr	r2, [r4, #0]
   b4728:	f8dc 3008 	ldr.w	r3, [ip, #8]
      if (__comp(__a, __b))
   b472c:	45f2      	cmp	sl, lr
	    {
	      std::__partial_sort(__first, __last, __last, __comp);
	      return;
	    }
	  --__depth_limit;
   b472e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
      if (__comp(__a, __b))
   b4732:	da0c      	bge.n	b474e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x8e>
	  if (__comp(__b, __c))
   b4734:	459e      	cmp	lr, r3
   b4736:	da03      	bge.n	b4740 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x80>
      __a = _GLIBCXX_MOVE(__b);
   b4738:	6020      	str	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b473a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
   b473e:	e00a      	b.n	b4756 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x96>
	  else if (__comp(__a, __c))
   b4740:	459a      	cmp	sl, r3
   b4742:	da06      	bge.n	b4752 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x92>
      __a = _GLIBCXX_MOVE(__b);
   b4744:	f8c4 c000 	str.w	ip, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4748:	f845 2c04 	str.w	r2, [r5, #-4]
   b474c:	e003      	b.n	b4756 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x96>
      else if (__comp(__a, __c))
   b474e:	459a      	cmp	sl, r3
   b4750:	da1e      	bge.n	b4790 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0xd0>
   b4752:	e9c4 9200 	strd	r9, r2, [r4]
    __unguarded_partition(_RandomAccessIterator __first,
   b4756:	4659      	mov	r1, fp
      while (__last - __first > int(_S_threshold))
   b4758:	462a      	mov	r2, r5
   b475a:	6820      	ldr	r0, [r4, #0]
   b475c:	4689      	mov	r9, r1
   b475e:	f851 3b04 	ldr.w	r3, [r1], #4
   b4762:	f8d0 a008 	ldr.w	sl, [r0, #8]
	  while (__comp(__first, __pivot))
   b4766:	6898      	ldr	r0, [r3, #8]
   b4768:	4550      	cmp	r0, sl
   b476a:	dbf6      	blt.n	b475a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x9a>
	--_M_current;
   b476c:	1f10      	subs	r0, r2, #4
   b476e:	4602      	mov	r2, r0
   b4770:	f850 e904 	ldr.w	lr, [r0], #-4
	  while (__comp(__pivot, __last))
   b4774:	f8de 7008 	ldr.w	r7, [lr, #8]
   b4778:	45ba      	cmp	sl, r7
   b477a:	dbf8      	blt.n	b476e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0xae>
	  if (!(__first < __last))
   b477c:	4591      	cmp	r9, r2
   b477e:	d30a      	bcc.n	b4796 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0xd6>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   b4780:	4629      	mov	r1, r5
   b4782:	4643      	mov	r3, r8
   b4784:	4632      	mov	r2, r6
   b4786:	4648      	mov	r0, r9
   b4788:	f7ff ff9a 	bl	b46c0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_>
      while (__last - __first > int(_S_threshold))
   b478c:	464d      	mov	r5, r9
   b478e:	e79f      	b.n	b46d0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x10>
      else if (__comp(__b, __c))
   b4790:	459e      	cmp	lr, r3
   b4792:	dad1      	bge.n	b4738 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x78>
   b4794:	e7d6      	b.n	b4744 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x84>
      __a = _GLIBCXX_MOVE(__b);
   b4796:	f841 ec04 	str.w	lr, [r1, #-4]
      __b = _GLIBCXX_MOVE(__tmp);
   b479a:	6013      	str	r3, [r2, #0]
	return *this;
   b479c:	e7dd      	b.n	b475a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_+0x9a>
	  __last = __cut;
	}
    }
   b479e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b47a2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b47a2:	b40e      	push	{r1, r2, r3}
   b47a4:	b503      	push	{r0, r1, lr}
   b47a6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b47a8:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b47aa:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b47ae:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b47b0:	f000 fd67 	bl	b5282 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b47b4:	b002      	add	sp, #8
   b47b6:	f85d eb04 	ldr.w	lr, [sp], #4
   b47ba:	b003      	add	sp, #12
   b47bc:	4770      	bx	lr
	...

000b47c0 <_ZN14WaterIntakeBox10closeValveEv>:
    for(unsigned int i = 0; i < _sensors.size(); i++) {
        Serial.printlnf("Sensor with pin %d, and water level %d is index %d", _sensors[i]->pin, _sensors[i]->waterLevel, i);
    }
};

void WaterIntakeBox::closeValve() {
   b47c0:	b510      	push	{r4, lr}
   b47c2:	4604      	mov	r4, r0
    Serial.println("Water Intake Box : Close Valve");
   b47c4:	f000 fe66 	bl	b5494 <_Z16_fetch_usbserialv>
   b47c8:	4903      	ldr	r1, [pc, #12]	; (b47d8 <_ZN14WaterIntakeBox10closeValveEv+0x18>)
   b47ca:	f000 fd32 	bl	b5232 <_ZN5Print7printlnEPKc>
    _intakeValve->close();
   b47ce:	6960      	ldr	r0, [r4, #20]
};
   b47d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _intakeValve->close();
   b47d4:	f7ff beb0 	b.w	b4538 <_ZN11IntakeValve5closeEv>
   b47d8:	000b5d8f 	.word	0x000b5d8f

000b47dc <_ZN14WaterIntakeBox9openValveEv>:

void WaterIntakeBox::openValve() {
   b47dc:	b510      	push	{r4, lr}
   b47de:	4604      	mov	r4, r0
    Serial.println("Water Intake Box : Open Valve");
   b47e0:	f000 fe58 	bl	b5494 <_Z16_fetch_usbserialv>
   b47e4:	4908      	ldr	r1, [pc, #32]	; (b4808 <_ZN14WaterIntakeBox9openValveEv+0x2c>)
   b47e6:	f000 fd24 	bl	b5232 <_ZN5Print7printlnEPKc>
    if (!WaterIntakeBox::_isActive) {
   b47ea:	7e23      	ldrb	r3, [r4, #24]
   b47ec:	b933      	cbnz	r3, b47fc <_ZN14WaterIntakeBox9openValveEv+0x20>
        Serial.println("Water Intake Box: Disabled");
   b47ee:	f000 fe51 	bl	b5494 <_Z16_fetch_usbserialv>
        return;
    }
    _intakeValve->open();
};
   b47f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.println("Water Intake Box: Disabled");
   b47f6:	4905      	ldr	r1, [pc, #20]	; (b480c <_ZN14WaterIntakeBox9openValveEv+0x30>)
   b47f8:	f000 bd1b 	b.w	b5232 <_ZN5Print7printlnEPKc>
    _intakeValve->open();
   b47fc:	6960      	ldr	r0, [r4, #20]
};
   b47fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _intakeValve->open();
   b4802:	f7ff be8b 	b.w	b451c <_ZN11IntakeValve4openEv>
   b4806:	bf00      	nop
   b4808:	000b5dae 	.word	0x000b5dae
   b480c:	000b5dcc 	.word	0x000b5dcc

000b4810 <_ZNSt12_Vector_baseIP17WaterIntakeSensorSaIS1_EED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4810:	b510      	push	{r4, lr}
   b4812:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
   b4814:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   b4816:	b118      	cbz	r0, b4820 <_ZNSt12_Vector_baseIP17WaterIntakeSensorSaIS1_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4818:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b481a:	1a09      	subs	r1, r1, r0
   b481c:	f7ff fc45 	bl	b40aa <_ZdlPvj>
      }
   b4820:	4620      	mov	r0, r4
   b4822:	bd10      	pop	{r4, pc}

000b4824 <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori>:
WaterIntakeBox::WaterIntakeBox(IntakeValve *valve, WaterIntakeSensor *sensors, int count)
   b4824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4828:	2500      	movs	r5, #0
   b482a:	b088      	sub	sp, #32
   b482c:	e9c0 5500 	strd	r5, r5, [r0]
   b4830:	6085      	str	r5, [r0, #8]
   b4832:	4604      	mov	r4, r0
   b4834:	4616      	mov	r6, r2
   b4836:	461f      	mov	r7, r3
   b4838:	4688      	mov	r8, r1
    Serial.println("Water Intake Box : Initializing");
   b483a:	f000 fe2b 	bl	b5494 <_Z16_fetch_usbserialv>
   b483e:	4939      	ldr	r1, [pc, #228]	; (b4924 <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0x100>)
   b4840:	f000 fcf7 	bl	b5232 <_ZN5Print7printlnEPKc>
    return { array, array + length};
   b4844:	2214      	movs	r2, #20
    _intakeValve = valve;
   b4846:	f8c4 8014 	str.w	r8, [r4, #20]
    return { array, array + length};
   b484a:	9605      	str	r6, [sp, #20]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b484c:	2008      	movs	r0, #8
   b484e:	fb02 6607 	mla	r6, r2, r7, r6
   b4852:	9606      	str	r6, [sp, #24]
   b4854:	e9cd 5502 	strd	r5, r5, [sp, #8]
   b4858:	9504      	str	r5, [sp, #16]
   b485a:	f7ff fc22 	bl	b40a2 <_Znwj>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b485e:	ae05      	add	r6, sp, #20
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4860:	4602      	mov	r2, r0
   b4862:	4603      	mov	r3, r0
   b4864:	ce03      	ldmia	r6!, {r0, r1}
   b4866:	f842 0b08 	str.w	r0, [r2], #8
	  _M_finish = __x._M_finish;
   b486a:	e9d4 6000 	ldrd	r6, r0, [r4]
   b486e:	6059      	str	r1, [r3, #4]
   b4870:	e9cd 6005 	strd	r6, r0, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4874:	68a1      	ldr	r1, [r4, #8]
   b4876:	60a2      	str	r2, [r4, #8]
	  _M_finish = __x._M_finish;
   b4878:	e9c4 3200 	strd	r3, r2, [r4]
      }
   b487c:	a805      	add	r0, sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
   b487e:	9107      	str	r1, [sp, #28]
	  _M_finish = __x._M_finish;
   b4880:	e9cd 5502 	strd	r5, r5, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4884:	9504      	str	r5, [sp, #16]
      }
   b4886:	f7ff ffc3 	bl	b4810 <_ZNSt12_Vector_baseIP17WaterIntakeSensorSaIS1_EED1Ev>
   b488a:	a802      	add	r0, sp, #8
   b488c:	f7ff ffc0 	bl	b4810 <_ZNSt12_Vector_baseIP17WaterIntakeSensorSaIS1_EED1Ev>
      : _M_current(__i) { }
   b4890:	e9d4 6800 	ldrd	r6, r8, [r4]
    _GLIBCXX20_CONSTEXPR
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
   b4894:	4546      	cmp	r6, r8
   b4896:	d02a      	beq.n	b48ee <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0xca>
    { return __lhs.base() - __rhs.base(); }
   b4898:	eba8 0506 	sub.w	r5, r8, r6
   b489c:	10aa      	asrs	r2, r5, #2

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
   b489e:	fab2 f282 	clz	r2, r2
   b48a2:	f1c2 021f 	rsb	r2, r2, #31
	{
	  std::__introsort_loop(__first, __last,
   b48a6:	f04f 0300 	mov.w	r3, #0
   b48aa:	0052      	lsls	r2, r2, #1
   b48ac:	4641      	mov	r1, r8
   b48ae:	4630      	mov	r0, r6
   b48b0:	f7ff ff06 	bl	b46c0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEEiNS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_T1_>
      if (__last - __first > int(_S_threshold))
   b48b4:	2d40      	cmp	r5, #64	; 0x40
   b48b6:	dd16      	ble.n	b48e6 <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0xc2>
      { return __normal_iterator(_M_current + __n); }
   b48b8:	f106 0540 	add.w	r5, r6, #64	; 0x40
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   b48bc:	4629      	mov	r1, r5
   b48be:	4630      	mov	r0, r6
   b48c0:	f7ff fed9 	bl	b4676 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0>
    __unguarded_insertion_sort(_RandomAccessIterator __first,
   b48c4:	4629      	mov	r1, r5
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   b48c6:	4588      	cmp	r8, r1
   b48c8:	d011      	beq.n	b48ee <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0xca>
	__val = _GLIBCXX_MOVE(*__last);
   b48ca:	680a      	ldr	r2, [r1, #0]
	return *this;
   b48cc:	460b      	mov	r3, r1
	{ return bool(_M_comp(__val, *__it)); }
   b48ce:	f853 6c04 	ldr.w	r6, [r3, #-4]
      while (__comp(__val, __next))
   b48d2:	6895      	ldr	r5, [r2, #8]
   b48d4:	68b0      	ldr	r0, [r6, #8]
   b48d6:	4285      	cmp	r5, r0
   b48d8:	da02      	bge.n	b48e0 <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0xbc>
	  *__last = _GLIBCXX_MOVE(*__next);
   b48da:	f843 6904 	str.w	r6, [r3], #-4
   b48de:	e7f6      	b.n	b48ce <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0xaa>
      *__last = _GLIBCXX_MOVE(__val);
   b48e0:	601a      	str	r2, [r3, #0]
      operator++() _GLIBCXX_NOEXCEPT
   b48e2:	3104      	adds	r1, #4
	return *this;
   b48e4:	e7ef      	b.n	b48c6 <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0xa2>
	std::__insertion_sort(__first, __last, __comp);
   b48e6:	4641      	mov	r1, r8
   b48e8:	4630      	mov	r0, r6
   b48ea:	f7ff fec4 	bl	b4676 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPP17WaterIntakeSensorSt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterIZN14WaterIntakeBoxC4EP11IntakeValveS3_iEUlS3_S3_E_EEEvT_SG_T0_.constprop.0>
        Serial.printlnf("Sensor with pin %d, and water level %d is index %d", _sensors[i]->pin, _sensors[i]->waterLevel, i);
   b48ee:	4e0e      	ldr	r6, [pc, #56]	; (b4928 <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0x104>)
    _sensorCount = count;
   b48f0:	60e7      	str	r7, [r4, #12]
    for(unsigned int i = 0; i < _sensors.size(); i++) {
   b48f2:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   b48f8:	1a9b      	subs	r3, r3, r2
   b48fa:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b48fe:	d20c      	bcs.n	b491a <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0xf6>
        Serial.printlnf("Sensor with pin %d, and water level %d is index %d", _sensors[i]->pin, _sensors[i]->waterLevel, i);
   b4900:	f000 fdc8 	bl	b5494 <_Z16_fetch_usbserialv>
   b4904:	6823      	ldr	r3, [r4, #0]
   b4906:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
   b490a:	9500      	str	r5, [sp, #0]
   b490c:	6893      	ldr	r3, [r2, #8]
   b490e:	6812      	ldr	r2, [r2, #0]
   b4910:	4631      	mov	r1, r6
   b4912:	f7ff ff46 	bl	b47a2 <_ZN5Print8printlnfEPKcz>
    for(unsigned int i = 0; i < _sensors.size(); i++) {
   b4916:	3501      	adds	r5, #1
   b4918:	e7ec      	b.n	b48f4 <_ZN14WaterIntakeBoxC1EP11IntakeValveP17WaterIntakeSensori+0xd0>
};
   b491a:	4620      	mov	r0, r4
   b491c:	b008      	add	sp, #32
   b491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4922:	bf00      	nop
   b4924:	000b5de7 	.word	0x000b5de7
   b4928:	000b5e07 	.word	0x000b5e07

000b492c <_ZNSt6vectorIP17WaterIntakeSensorSaIS1_EE2atEj>:
      at(size_type __n)
   b492c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b492e:	e9d0 5400 	ldrd	r5, r4, [r0]
   b4932:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b4934:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4938:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
   b493c:	d302      	bcc.n	b4944 <_ZNSt6vectorIP17WaterIntakeSensorSaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b493e:	4803      	ldr	r0, [pc, #12]	; (b494c <_ZNSt6vectorIP17WaterIntakeSensorSaIS1_EE2atEj+0x20>)
   b4940:	f000 ffa7 	bl	b5892 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4944:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   b4948:	bd38      	pop	{r3, r4, r5, pc}
   b494a:	bf00      	nop
   b494c:	000b5e3a 	.word	0x000b5e3a

000b4950 <_ZN14WaterIntakeBox20getCurrentWaterLevelEv>:
    Serial.println("Water Intake Box : Deactivate");
    this->_isActive = false;
    this->_intakeValve->close();
};

void WaterIntakeBox::getCurrentWaterLevel() {
   b4950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int waterLevel = 0;
    for (unsigned int i = 0; i < _sensorCount; i++)
   b4952:	2500      	movs	r5, #0
void WaterIntakeBox::getCurrentWaterLevel() {
   b4954:	4604      	mov	r4, r0
    int waterLevel = 0;
   b4956:	462f      	mov	r7, r5
    for (unsigned int i = 0; i < _sensorCount; i++)
   b4958:	68e3      	ldr	r3, [r4, #12]
   b495a:	42ab      	cmp	r3, r5
   b495c:	d918      	bls.n	b4990 <_ZN14WaterIntakeBox20getCurrentWaterLevelEv+0x40>
    {
        int32_t reading = digitalRead(_sensors[i]->pin);
   b495e:	6823      	ldr	r3, [r4, #0]
   b4960:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   b4964:	8818      	ldrh	r0, [r3, #0]
   b4966:	f000 fefd 	bl	b5764 <digitalRead>
        if (reading && _sensors.at(i)->waterLevel >= waterLevel) {
   b496a:	4606      	mov	r6, r0
   b496c:	b140      	cbz	r0, b4980 <_ZN14WaterIntakeBox20getCurrentWaterLevelEv+0x30>
   b496e:	4629      	mov	r1, r5
   b4970:	4620      	mov	r0, r4
   b4972:	f7ff ffdb 	bl	b492c <_ZNSt6vectorIP17WaterIntakeSensorSaIS1_EE2atEj>
   b4976:	6803      	ldr	r3, [r0, #0]
   b4978:	689b      	ldr	r3, [r3, #8]
   b497a:	429f      	cmp	r7, r3
   b497c:	bfb8      	it	lt
   b497e:	461f      	movlt	r7, r3
            waterLevel = _sensors.at(i)->waterLevel;
        }
        _sensors.at(i)->lastState = reading;
   b4980:	4629      	mov	r1, r5
   b4982:	4620      	mov	r0, r4
   b4984:	f7ff ffd2 	bl	b492c <_ZNSt6vectorIP17WaterIntakeSensorSaIS1_EE2atEj>
   b4988:	6803      	ldr	r3, [r0, #0]
    for (unsigned int i = 0; i < _sensorCount; i++)
   b498a:	3501      	adds	r5, #1
        _sensors.at(i)->lastState = reading;
   b498c:	611e      	str	r6, [r3, #16]
    for (unsigned int i = 0; i < _sensorCount; i++)
   b498e:	e7e3      	b.n	b4958 <_ZN14WaterIntakeBox20getCurrentWaterLevelEv+0x8>
    }
    this->_waterLevel = waterLevel;
   b4990:	6127      	str	r7, [r4, #16]
};
   b4992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4994 <_ZN14WaterIntakeBox8activateEv>:
void WaterIntakeBox::activate() {
   b4994:	b510      	push	{r4, lr}
   b4996:	4604      	mov	r4, r0
    Serial.println("Water Intake Box : Activate");
   b4998:	f000 fd7c 	bl	b5494 <_Z16_fetch_usbserialv>
   b499c:	4906      	ldr	r1, [pc, #24]	; (b49b8 <_ZN14WaterIntakeBox8activateEv+0x24>)
   b499e:	f000 fc48 	bl	b5232 <_ZN5Print7printlnEPKc>
    if (this->_isActive) {
   b49a2:	7e23      	ldrb	r3, [r4, #24]
   b49a4:	b933      	cbnz	r3, b49b4 <_ZN14WaterIntakeBox8activateEv+0x20>
    this->_isActive = true;
   b49a6:	2301      	movs	r3, #1
   b49a8:	7623      	strb	r3, [r4, #24]
    this->getCurrentWaterLevel();
   b49aa:	4620      	mov	r0, r4
};
   b49ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    this->getCurrentWaterLevel();
   b49b0:	f7ff bfce 	b.w	b4950 <_ZN14WaterIntakeBox20getCurrentWaterLevelEv>
};
   b49b4:	bd10      	pop	{r4, pc}
   b49b6:	bf00      	nop
   b49b8:	000b5e84 	.word	0x000b5e84

000b49bc <_ZN14WaterIntakeBox4loopEv>:
        attachInterrupt(sensor->pin, *trigger->interrupt, trigger->interruptMode);
    }
    this->getCurrentWaterLevel();
};

void WaterIntakeBox::loop() {
   b49bc:	b510      	push	{r4, lr}
   b49be:	4604      	mov	r4, r0
    Serial.println("Water Intake Box : Loop");
   b49c0:	f000 fd68 	bl	b5494 <_Z16_fetch_usbserialv>
   b49c4:	4903      	ldr	r1, [pc, #12]	; (b49d4 <_ZN14WaterIntakeBox4loopEv+0x18>)
   b49c6:	f000 fc34 	bl	b5232 <_ZN5Print7printlnEPKc>
    this->getCurrentWaterLevel();
   b49ca:	4620      	mov	r0, r4
   b49cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    this->getCurrentWaterLevel();
   b49d0:	f7ff bfbe 	b.w	b4950 <_ZN14WaterIntakeBox20getCurrentWaterLevelEv>
   b49d4:	000b5ea0 	.word	0x000b5ea0

000b49d8 <_ZN14WaterIntakeBox5setupEv>:
void WaterIntakeBox::setup() {
   b49d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b49da:	4604      	mov	r4, r0
    Serial.println("Water Intake Box : Setup");
   b49dc:	f000 fd5a 	bl	b5494 <_Z16_fetch_usbserialv>
   b49e0:	4914      	ldr	r1, [pc, #80]	; (b4a34 <_ZN14WaterIntakeBox5setupEv+0x5c>)
   b49e2:	f000 fc26 	bl	b5232 <_ZN5Print7printlnEPKc>
    for (unsigned int i = 0; i < _sensorCount; i++)
   b49e6:	2500      	movs	r5, #0
        attachInterrupt(sensor->pin, *trigger->interrupt, trigger->interruptMode);
   b49e8:	462f      	mov	r7, r5
    for (unsigned int i = 0; i < _sensorCount; i++)
   b49ea:	68e3      	ldr	r3, [r4, #12]
   b49ec:	42ab      	cmp	r3, r5
   b49ee:	d91a      	bls.n	b4a26 <_ZN14WaterIntakeBox5setupEv+0x4e>
        const WaterIntakeSensor *sensor = _sensors.at(i);
   b49f0:	4629      	mov	r1, r5
   b49f2:	4620      	mov	r0, r4
   b49f4:	f7ff ff9a 	bl	b492c <_ZNSt6vectorIP17WaterIntakeSensorSaIS1_EE2atEj>
   b49f8:	6806      	ldr	r6, [r0, #0]
        pinMode(sensor->pin, sensor->pinMode);
   b49fa:	7931      	ldrb	r1, [r6, #4]
   b49fc:	8830      	ldrh	r0, [r6, #0]
   b49fe:	f000 fe87 	bl	b5710 <pinMode>
        Trigger* trigger = _sensors.at(i)->trigger;
   b4a02:	4629      	mov	r1, r5
   b4a04:	4620      	mov	r0, r4
   b4a06:	f7ff ff91 	bl	b492c <_ZNSt6vectorIP17WaterIntakeSensorSaIS1_EE2atEj>
   b4a0a:	6803      	ldr	r3, [r0, #0]
   b4a0c:	68db      	ldr	r3, [r3, #12]
        if (!trigger->interrupt || !trigger->interruptMode) {
   b4a0e:	6859      	ldr	r1, [r3, #4]
   b4a10:	b139      	cbz	r1, b4a22 <_ZN14WaterIntakeBox5setupEv+0x4a>
   b4a12:	781a      	ldrb	r2, [r3, #0]
   b4a14:	b12a      	cbz	r2, b4a22 <_ZN14WaterIntakeBox5setupEv+0x4a>
        attachInterrupt(sensor->pin, *trigger->interrupt, trigger->interruptMode);
   b4a16:	8830      	ldrh	r0, [r6, #0]
   b4a18:	9700      	str	r7, [sp, #0]
   b4a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4a1e:	f000 fa75 	bl	b4f0c <_Z15attachInterrupttPFvvE13InterruptModeah>
    for (unsigned int i = 0; i < _sensorCount; i++)
   b4a22:	3501      	adds	r5, #1
   b4a24:	e7e1      	b.n	b49ea <_ZN14WaterIntakeBox5setupEv+0x12>
    this->getCurrentWaterLevel();
   b4a26:	4620      	mov	r0, r4
};
   b4a28:	b003      	add	sp, #12
   b4a2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    this->getCurrentWaterLevel();
   b4a2e:	f7ff bf8f 	b.w	b4950 <_ZN14WaterIntakeBox20getCurrentWaterLevelEv>
   b4a32:	bf00      	nop
   b4a34:	000b5eb8 	.word	0x000b5eb8

000b4a38 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <os_mutex_recursive_create+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	00030248 	.word	0x00030248

000b4a48 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <HAL_RNG_GetRandomNumber+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	685b      	ldr	r3, [r3, #4]
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	00030218 	.word	0x00030218

000b4a58 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	695b      	ldr	r3, [r3, #20]
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	00030218 	.word	0x00030218

000b4a68 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <hal_gpio_mode+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	689b      	ldr	r3, [r3, #8]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	0003022c 	.word	0x0003022c

000b4a78 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <hal_gpio_get_mode+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	68db      	ldr	r3, [r3, #12]
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	0003022c 	.word	0x0003022c

000b4a88 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <hal_gpio_write+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	691b      	ldr	r3, [r3, #16]
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	0003022c 	.word	0x0003022c

000b4a98 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <hal_gpio_read+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	695b      	ldr	r3, [r3, #20]
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	0003022c 	.word	0x0003022c

000b4aa8 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <hal_interrupt_attach+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	699b      	ldr	r3, [r3, #24]
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	0003022c 	.word	0x0003022c

000b4ab8 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <hal_interrupt_detach+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	69db      	ldr	r3, [r3, #28]
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	0003022c 	.word	0x0003022c

000b4ac8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <hal_i2c_write+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	6a1b      	ldr	r3, [r3, #32]
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	00030228 	.word	0x00030228

000b4ad8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <hal_i2c_available+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	00030228 	.word	0x00030228

000b4ae8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <hal_i2c_read+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	00030228 	.word	0x00030228

000b4af8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <hal_i2c_peek+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	00030228 	.word	0x00030228

000b4b08 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <hal_i2c_flush+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	00030228 	.word	0x00030228

000b4b18 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <hal_i2c_is_enabled+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	00030228 	.word	0x00030228

000b4b28 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <hal_i2c_init+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030228 	.word	0x00030228

000b4b38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <inet_inet_ntop+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	695b      	ldr	r3, [r3, #20]
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030264 	.word	0x00030264

000b4b48 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <netdb_freeaddrinfo+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	689b      	ldr	r3, [r3, #8]
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030268 	.word	0x00030268

000b4b58 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <netdb_getaddrinfo+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	68db      	ldr	r3, [r3, #12]
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	00030268 	.word	0x00030268

000b4b68 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <hal_spi_init+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	69db      	ldr	r3, [r3, #28]
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	00030230 	.word	0x00030230

000b4b78 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <hal_spi_is_enabled+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	6a1b      	ldr	r3, [r3, #32]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	00030230 	.word	0x00030230

000b4b88 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <hal_usart_write+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	68db      	ldr	r3, [r3, #12]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	0003023c 	.word	0x0003023c

000b4b98 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <hal_usart_available+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	691b      	ldr	r3, [r3, #16]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	0003023c 	.word	0x0003023c

000b4ba8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <hal_usart_read+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	695b      	ldr	r3, [r3, #20]
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	0003023c 	.word	0x0003023c

000b4bb8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <hal_usart_peek+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	699b      	ldr	r3, [r3, #24]
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	0003023c 	.word	0x0003023c

000b4bc8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <hal_usart_flush+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	69db      	ldr	r3, [r3, #28]
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	0003023c 	.word	0x0003023c

000b4bd8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <hal_usart_is_enabled+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	6a1b      	ldr	r3, [r3, #32]
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	0003023c 	.word	0x0003023c

000b4be8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <hal_usart_available_data_for_write+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	0003023c 	.word	0x0003023c

000b4bf8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <hal_usart_init_ex+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	0003023c 	.word	0x0003023c

000b4c08 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <HAL_USB_USART_Init+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	681b      	ldr	r3, [r3, #0]
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	0003024c 	.word	0x0003024c

000b4c18 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <HAL_USB_USART_Available_Data+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	691b      	ldr	r3, [r3, #16]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	0003024c 	.word	0x0003024c

000b4c28 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	695b      	ldr	r3, [r3, #20]
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	0003024c 	.word	0x0003024c

000b4c38 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <HAL_USB_USART_Receive_Data+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	699b      	ldr	r3, [r3, #24]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	0003024c 	.word	0x0003024c

000b4c48 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <HAL_USB_USART_Send_Data+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	69db      	ldr	r3, [r3, #28]
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	0003024c 	.word	0x0003024c

000b4c58 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <HAL_USB_USART_Flush_Data+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	6a1b      	ldr	r3, [r3, #32]
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	0003024c 	.word	0x0003024c

000b4c68 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <set_system_mode+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	685b      	ldr	r3, [r3, #4]
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030220 	.word	0x00030220

000b4c78 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <system_delay_ms+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	695b      	ldr	r3, [r3, #20]
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030220 	.word	0x00030220

000b4c88 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b03      	ldr	r3, [pc, #12]	; (b4c98 <system_ctrl_set_app_request_handler+0x10>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c92:	9301      	str	r3, [sp, #4]
   b4c94:	bd08      	pop	{r3, pc}
   b4c96:	0000      	.short	0x0000
   b4c98:	00030220 	.word	0x00030220

000b4c9c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b03      	ldr	r3, [pc, #12]	; (b4cac <system_ctrl_set_result+0x10>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4ca6:	9301      	str	r3, [sp, #4]
   b4ca8:	bd08      	pop	{r3, pc}
   b4caa:	0000      	.short	0x0000
   b4cac:	00030220 	.word	0x00030220

000b4cb0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <spark_set_random_seed_from_cloud_handler+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	00030244 	.word	0x00030244

000b4cc0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <network_connect+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	685b      	ldr	r3, [r3, #4]
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	00030240 	.word	0x00030240

000b4cd0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <network_connecting+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	689b      	ldr	r3, [r3, #8]
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	00030240 	.word	0x00030240

000b4ce0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <network_disconnect+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	68db      	ldr	r3, [r3, #12]
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	00030240 	.word	0x00030240

000b4cf0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <network_ready+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	691b      	ldr	r3, [r3, #16]
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	00030240 	.word	0x00030240

000b4d00 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <network_on+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	695b      	ldr	r3, [r3, #20]
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	00030240 	.word	0x00030240

000b4d10 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <network_off+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	699b      	ldr	r3, [r3, #24]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	00030240 	.word	0x00030240

000b4d20 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <network_listen+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	69db      	ldr	r3, [r3, #28]
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	00030240 	.word	0x00030240

000b4d30 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <network_listening+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	6a1b      	ldr	r3, [r3, #32]
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	00030240 	.word	0x00030240

000b4d40 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <network_set_listen_timeout+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	00030240 	.word	0x00030240

000b4d50 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <network_get_listen_timeout+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	00030240 	.word	0x00030240

000b4d60 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <network_is_on+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	00030240 	.word	0x00030240

000b4d70 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <network_is_off+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	00030240 	.word	0x00030240

000b4d80 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <malloc+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	681b      	ldr	r3, [r3, #0]
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	0003021c 	.word	0x0003021c

000b4d90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <free+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	685b      	ldr	r3, [r3, #4]
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	0003021c 	.word	0x0003021c

000b4da0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4da0:	b508      	push	{r3, lr}
   b4da2:	4b02      	ldr	r3, [pc, #8]	; (b4dac <vsnprintf+0xc>)
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4da8:	9301      	str	r3, [sp, #4]
   b4daa:	bd08      	pop	{r3, pc}
   b4dac:	0003021c 	.word	0x0003021c

000b4db0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4db0:	b508      	push	{r3, lr}
   b4db2:	4b02      	ldr	r3, [pc, #8]	; (b4dbc <abort+0xc>)
   b4db4:	681b      	ldr	r3, [r3, #0]
   b4db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4db8:	9301      	str	r3, [sp, #4]
   b4dba:	bd08      	pop	{r3, pc}
   b4dbc:	0003021c 	.word	0x0003021c

000b4dc0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4dc0:	b508      	push	{r3, lr}
   b4dc2:	4b02      	ldr	r3, [pc, #8]	; (b4dcc <__assert_func+0xc>)
   b4dc4:	681b      	ldr	r3, [r3, #0]
   b4dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4dc8:	9301      	str	r3, [sp, #4]
   b4dca:	bd08      	pop	{r3, pc}
   b4dcc:	0003021c 	.word	0x0003021c

000b4dd0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4dd0:	b508      	push	{r3, lr}
   b4dd2:	4b02      	ldr	r3, [pc, #8]	; (b4ddc <newlib_impure_ptr_callback+0xc>)
   b4dd4:	681b      	ldr	r3, [r3, #0]
   b4dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	bd08      	pop	{r3, pc}
   b4ddc:	0003021c 	.word	0x0003021c

000b4de0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4de0:	2100      	movs	r1, #0
   b4de2:	f7ff bf49 	b.w	b4c78 <system_delay_ms>
	...

000b4de8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4de8:	4802      	ldr	r0, [pc, #8]	; (b4df4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4dea:	2300      	movs	r3, #0
   b4dec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4dee:	f7ff be23 	b.w	b4a38 <os_mutex_recursive_create>
   b4df2:	bf00      	nop
   b4df4:	2003e6b8 	.word	0x2003e6b8

000b4df8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4df8:	2200      	movs	r2, #0
   b4dfa:	6840      	ldr	r0, [r0, #4]
   b4dfc:	4611      	mov	r1, r2
   b4dfe:	f7ff bf97 	b.w	b4d30 <network_listening>

000b4e02 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4e02:	2200      	movs	r2, #0
   b4e04:	6840      	ldr	r0, [r0, #4]
   b4e06:	4611      	mov	r1, r2
   b4e08:	f7ff bfa2 	b.w	b4d50 <network_get_listen_timeout>

000b4e0c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4e0c:	6840      	ldr	r0, [r0, #4]
   b4e0e:	2200      	movs	r2, #0
   b4e10:	f7ff bf96 	b.w	b4d40 <network_set_listen_timeout>

000b4e14 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e14:	6840      	ldr	r0, [r0, #4]
   b4e16:	2200      	movs	r2, #0
   b4e18:	f081 0101 	eor.w	r1, r1, #1
   b4e1c:	f7ff bf80 	b.w	b4d20 <network_listen>

000b4e20 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4e20:	2300      	movs	r3, #0
   b4e22:	6840      	ldr	r0, [r0, #4]
   b4e24:	461a      	mov	r2, r3
   b4e26:	4619      	mov	r1, r3
   b4e28:	f7ff bf72 	b.w	b4d10 <network_off>

000b4e2c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e2c:	2300      	movs	r3, #0
   b4e2e:	6840      	ldr	r0, [r0, #4]
   b4e30:	461a      	mov	r2, r3
   b4e32:	4619      	mov	r1, r3
   b4e34:	f7ff bf64 	b.w	b4d00 <network_on>

000b4e38 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e38:	2200      	movs	r2, #0
   b4e3a:	6840      	ldr	r0, [r0, #4]
   b4e3c:	4611      	mov	r1, r2
   b4e3e:	f7ff bf57 	b.w	b4cf0 <network_ready>

000b4e42 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e42:	2200      	movs	r2, #0
   b4e44:	6840      	ldr	r0, [r0, #4]
   b4e46:	4611      	mov	r1, r2
   b4e48:	f7ff bf42 	b.w	b4cd0 <network_connecting>

000b4e4c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e4c:	6840      	ldr	r0, [r0, #4]
   b4e4e:	2200      	movs	r2, #0
   b4e50:	2102      	movs	r1, #2
   b4e52:	f7ff bf45 	b.w	b4ce0 <network_disconnect>

000b4e56 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e56:	2300      	movs	r3, #0
   b4e58:	6840      	ldr	r0, [r0, #4]
   b4e5a:	461a      	mov	r2, r3
   b4e5c:	f7ff bf30 	b.w	b4cc0 <network_connect>

000b4e60 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e60:	4b02      	ldr	r3, [pc, #8]	; (b4e6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e62:	2203      	movs	r2, #3
   b4e64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e66:	4a02      	ldr	r2, [pc, #8]	; (b4e70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e68:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e6a:	4770      	bx	lr
   b4e6c:	2003e6bc 	.word	0x2003e6bc
   b4e70:	000b5edc 	.word	0x000b5edc

000b4e74 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4e74:	4770      	bx	lr

000b4e76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e78:	4606      	mov	r6, r0
   b4e7a:	4615      	mov	r5, r2
   b4e7c:	460c      	mov	r4, r1
   b4e7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4e80:	42bc      	cmp	r4, r7
   b4e82:	d006      	beq.n	b4e92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4e84:	6833      	ldr	r3, [r6, #0]
   b4e86:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4e8a:	689b      	ldr	r3, [r3, #8]
   b4e8c:	4630      	mov	r0, r6
   b4e8e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4e90:	e7f6      	b.n	b4e80 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4e92:	4628      	mov	r0, r5
   b4e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e96 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4e96:	7c00      	ldrb	r0, [r0, #16]
   b4e98:	2200      	movs	r2, #0
   b4e9a:	f7ff be15 	b.w	b4ac8 <hal_i2c_write>

000b4e9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4e9e:	7c00      	ldrb	r0, [r0, #16]
   b4ea0:	2100      	movs	r1, #0
   b4ea2:	f7ff be19 	b.w	b4ad8 <hal_i2c_available>

000b4ea6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4ea6:	7c00      	ldrb	r0, [r0, #16]
   b4ea8:	2100      	movs	r1, #0
   b4eaa:	f7ff be1d 	b.w	b4ae8 <hal_i2c_read>

000b4eae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4eae:	7c00      	ldrb	r0, [r0, #16]
   b4eb0:	2100      	movs	r1, #0
   b4eb2:	f7ff be21 	b.w	b4af8 <hal_i2c_peek>

000b4eb6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4eb6:	7c00      	ldrb	r0, [r0, #16]
   b4eb8:	2100      	movs	r1, #0
   b4eba:	f7ff be25 	b.w	b4b08 <hal_i2c_flush>

000b4ebe <_ZN7TwoWireD0Ev>:
   b4ebe:	b510      	push	{r4, lr}
   b4ec0:	2114      	movs	r1, #20
   b4ec2:	4604      	mov	r4, r0
   b4ec4:	f7ff f8f1 	bl	b40aa <_ZdlPvj>
   b4ec8:	4620      	mov	r0, r4
   b4eca:	bd10      	pop	{r4, pc}

000b4ecc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4ecc:	b538      	push	{r3, r4, r5, lr}
   b4ece:	4604      	mov	r4, r0
   b4ed0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4ed6:	2200      	movs	r2, #0
   b4ed8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4edc:	4b09      	ldr	r3, [pc, #36]	; (b4f04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4ede:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4ee0:	4608      	mov	r0, r1
   b4ee2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4ee4:	4629      	mov	r1, r5
   b4ee6:	f7ff fe1f 	bl	b4b28 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4eea:	30bf      	adds	r0, #191	; 0xbf
   b4eec:	d108      	bne.n	b4f00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4eee:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4ef0:	07db      	lsls	r3, r3, #31
   b4ef2:	d505      	bpl.n	b4f00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4ef4:	6868      	ldr	r0, [r5, #4]
   b4ef6:	f7ff ff4b 	bl	b4d90 <free>
    free(conf.tx_buffer);
   b4efa:	68e8      	ldr	r0, [r5, #12]
   b4efc:	f7ff ff48 	bl	b4d90 <free>
}
   b4f00:	4620      	mov	r0, r4
   b4f02:	bd38      	pop	{r3, r4, r5, pc}
   b4f04:	000b5f18 	.word	0x000b5f18

000b4f08 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b4f08:	4700      	bx	r0
	...

000b4f0c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b4f0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b4f10:	2400      	movs	r4, #0
{
   b4f12:	461d      	mov	r5, r3
   b4f14:	460f      	mov	r7, r1
   b4f16:	4690      	mov	r8, r2
   b4f18:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b4f1a:	f7ff fdcd 	bl	b4ab8 <hal_interrupt_detach>
  if (priority >= 0) {
   b4f1e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b4f20:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b4f24:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b4f28:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b4f2c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b4f30:	bfa2      	ittt	ge
   b4f32:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b4f36:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b4f3a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b4f3c:	4907      	ldr	r1, [pc, #28]	; (b4f5c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b4f3e:	9400      	str	r4, [sp, #0]
   b4f40:	4643      	mov	r3, r8
   b4f42:	463a      	mov	r2, r7
   b4f44:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b4f46:	bfa8      	it	ge
   b4f48:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b4f4c:	f7ff fdac 	bl	b4aa8 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b4f50:	fab0 f080 	clz	r0, r0
   b4f54:	0940      	lsrs	r0, r0, #5
   b4f56:	b004      	add	sp, #16
   b4f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4f5c:	000b4f09 	.word	0x000b4f09

000b4f60 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4f60:	4770      	bx	lr

000b4f62 <_ZN9IPAddressD0Ev>:
   b4f62:	b510      	push	{r4, lr}
   b4f64:	2118      	movs	r1, #24
   b4f66:	4604      	mov	r4, r0
   b4f68:	f7ff f89f 	bl	b40aa <_ZdlPvj>
   b4f6c:	4620      	mov	r0, r4
   b4f6e:	bd10      	pop	{r4, pc}

000b4f70 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4f70:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4f72:	7d03      	ldrb	r3, [r0, #20]
   b4f74:	2b06      	cmp	r3, #6
{
   b4f76:	b08d      	sub	sp, #52	; 0x34
   b4f78:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f7a:	f100 0704 	add.w	r7, r0, #4
   b4f7e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4f82:	d012      	beq.n	b4faa <_ZNK9IPAddress7printToER5Print+0x3a>
   b4f84:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4f88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4f8c:	220a      	movs	r2, #10
   b4f8e:	4630      	mov	r0, r6
   b4f90:	f000 f959 	bl	b5246 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4f94:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4f96:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4f98:	d019      	beq.n	b4fce <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4f9a:	2c00      	cmp	r4, #0
   b4f9c:	d0f4      	beq.n	b4f88 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4f9e:	212e      	movs	r1, #46	; 0x2e
   b4fa0:	4630      	mov	r0, r6
   b4fa2:	f000 f937 	bl	b5214 <_ZN5Print5printEc>
   b4fa6:	4404      	add	r4, r0
   b4fa8:	e7ee      	b.n	b4f88 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4faa:	232f      	movs	r3, #47	; 0x2f
   b4fac:	466a      	mov	r2, sp
   b4fae:	4639      	mov	r1, r7
   b4fb0:	200a      	movs	r0, #10
		buf[0] = 0;
   b4fb2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4fb6:	f7ff fdbf 	bl	b4b38 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4fba:	4668      	mov	r0, sp
   b4fbc:	f7ff f82e 	bl	b401c <strlen>
   b4fc0:	6833      	ldr	r3, [r6, #0]
   b4fc2:	4602      	mov	r2, r0
   b4fc4:	68db      	ldr	r3, [r3, #12]
   b4fc6:	4669      	mov	r1, sp
   b4fc8:	4630      	mov	r0, r6
   b4fca:	4798      	blx	r3
   b4fcc:	4604      	mov	r4, r0
    }
    return n;
}
   b4fce:	4620      	mov	r0, r4
   b4fd0:	b00d      	add	sp, #52	; 0x34
   b4fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4fd4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4fd4:	b510      	push	{r4, lr}
   b4fd6:	4b05      	ldr	r3, [pc, #20]	; (b4fec <_ZN9IPAddressC1Ev+0x18>)
   b4fd8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4fda:	2211      	movs	r2, #17
   b4fdc:	f840 3b04 	str.w	r3, [r0], #4
   b4fe0:	2100      	movs	r1, #0
   b4fe2:	f000 fd34 	bl	b5a4e <memset>
}
   b4fe6:	4620      	mov	r0, r4
   b4fe8:	bd10      	pop	{r4, pc}
   b4fea:	bf00      	nop
   b4fec:	000b5f40 	.word	0x000b5f40

000b4ff0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4ff0:	4603      	mov	r3, r0
   b4ff2:	4a07      	ldr	r2, [pc, #28]	; (b5010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4ff4:	b510      	push	{r4, lr}
   b4ff6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4ffa:	f101 0210 	add.w	r2, r1, #16
   b4ffe:	f851 4b04 	ldr.w	r4, [r1], #4
   b5002:	f843 4b04 	str.w	r4, [r3], #4
   b5006:	4291      	cmp	r1, r2
   b5008:	d1f9      	bne.n	b4ffe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b500a:	780a      	ldrb	r2, [r1, #0]
   b500c:	701a      	strb	r2, [r3, #0]
}
   b500e:	bd10      	pop	{r4, pc}
   b5010:	000b5f40 	.word	0x000b5f40

000b5014 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5014:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5016:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b501a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b501e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5022:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5026:	2304      	movs	r3, #4
   b5028:	6041      	str	r1, [r0, #4]
   b502a:	7503      	strb	r3, [r0, #20]
}
   b502c:	bd10      	pop	{r4, pc}
	...

000b5030 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5030:	b507      	push	{r0, r1, r2, lr}
   b5032:	4b06      	ldr	r3, [pc, #24]	; (b504c <_ZN9IPAddressC1EPKh+0x1c>)
   b5034:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5036:	78cb      	ldrb	r3, [r1, #3]
   b5038:	9300      	str	r3, [sp, #0]
   b503a:	788b      	ldrb	r3, [r1, #2]
   b503c:	784a      	ldrb	r2, [r1, #1]
   b503e:	7809      	ldrb	r1, [r1, #0]
   b5040:	f7ff ffe8 	bl	b5014 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5044:	b003      	add	sp, #12
   b5046:	f85d fb04 	ldr.w	pc, [sp], #4
   b504a:	bf00      	nop
   b504c:	000b5f40 	.word	0x000b5f40

000b5050 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5050:	4b01      	ldr	r3, [pc, #4]	; (b5058 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5052:	4a02      	ldr	r2, [pc, #8]	; (b505c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5054:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5056:	4770      	bx	lr
   b5058:	2003e6c4 	.word	0x2003e6c4
   b505c:	000b5f4c 	.word	0x000b5f4c

000b5060 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5060:	2300      	movs	r3, #0
   b5062:	6840      	ldr	r0, [r0, #4]
   b5064:	461a      	mov	r2, r3
   b5066:	f7ff be2b 	b.w	b4cc0 <network_connect>

000b506a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b506a:	6840      	ldr	r0, [r0, #4]
   b506c:	2200      	movs	r2, #0
   b506e:	2102      	movs	r1, #2
   b5070:	f7ff be36 	b.w	b4ce0 <network_disconnect>

000b5074 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5074:	2200      	movs	r2, #0
   b5076:	6840      	ldr	r0, [r0, #4]
   b5078:	4611      	mov	r1, r2
   b507a:	f7ff be29 	b.w	b4cd0 <network_connecting>

000b507e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b507e:	2200      	movs	r2, #0
   b5080:	6840      	ldr	r0, [r0, #4]
   b5082:	4611      	mov	r1, r2
   b5084:	f7ff be34 	b.w	b4cf0 <network_ready>

000b5088 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5088:	2300      	movs	r3, #0
   b508a:	6840      	ldr	r0, [r0, #4]
   b508c:	461a      	mov	r2, r3
   b508e:	4619      	mov	r1, r3
   b5090:	f7ff be36 	b.w	b4d00 <network_on>

000b5094 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5094:	2300      	movs	r3, #0
   b5096:	6840      	ldr	r0, [r0, #4]
   b5098:	461a      	mov	r2, r3
   b509a:	4619      	mov	r1, r3
   b509c:	f7ff be38 	b.w	b4d10 <network_off>

000b50a0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b50a0:	6840      	ldr	r0, [r0, #4]
   b50a2:	2100      	movs	r1, #0
   b50a4:	f7ff be5c 	b.w	b4d60 <network_is_on>

000b50a8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b50a8:	6840      	ldr	r0, [r0, #4]
   b50aa:	2100      	movs	r1, #0
   b50ac:	f7ff be60 	b.w	b4d70 <network_is_off>

000b50b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b50b0:	6840      	ldr	r0, [r0, #4]
   b50b2:	2200      	movs	r2, #0
   b50b4:	f081 0101 	eor.w	r1, r1, #1
   b50b8:	f7ff be32 	b.w	b4d20 <network_listen>

000b50bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b50bc:	6840      	ldr	r0, [r0, #4]
   b50be:	2200      	movs	r2, #0
   b50c0:	f7ff be3e 	b.w	b4d40 <network_set_listen_timeout>

000b50c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b50c4:	2200      	movs	r2, #0
   b50c6:	6840      	ldr	r0, [r0, #4]
   b50c8:	4611      	mov	r1, r2
   b50ca:	f7ff be41 	b.w	b4d50 <network_get_listen_timeout>

000b50ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b50ce:	2200      	movs	r2, #0
   b50d0:	6840      	ldr	r0, [r0, #4]
   b50d2:	4611      	mov	r1, r2
   b50d4:	f7ff be2c 	b.w	b4d30 <network_listening>

000b50d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b50d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b50dc:	b095      	sub	sp, #84	; 0x54
   b50de:	4614      	mov	r4, r2
   b50e0:	460d      	mov	r5, r1
   b50e2:	4607      	mov	r7, r0
    IPAddress addr;
   b50e4:	f7ff ff76 	bl	b4fd4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b50e8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b50ea:	221c      	movs	r2, #28
   b50ec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b50ee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b50f0:	f000 fcad 	bl	b5a4e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b50f4:	2340      	movs	r3, #64	; 0x40
   b50f6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b50f8:	4620      	mov	r0, r4
   b50fa:	466b      	mov	r3, sp
   b50fc:	aa0c      	add	r2, sp, #48	; 0x30
   b50fe:	2100      	movs	r1, #0
   b5100:	f7ff fd2a 	bl	b4b58 <netdb_getaddrinfo>
    if (!r) {
   b5104:	4604      	mov	r4, r0
   b5106:	2800      	cmp	r0, #0
   b5108:	d14b      	bne.n	b51a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b510a:	4602      	mov	r2, r0
   b510c:	2101      	movs	r1, #1
   b510e:	6868      	ldr	r0, [r5, #4]
   b5110:	f7ff fdee 	bl	b4cf0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5114:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5116:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5118:	4622      	mov	r2, r4
   b511a:	6868      	ldr	r0, [r5, #4]
   b511c:	f7ff fde8 	bl	b4cf0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5120:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5122:	4681      	mov	r9, r0
        bool ok = false;
   b5124:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5126:	2e00      	cmp	r6, #0
   b5128:	d03b      	beq.n	b51a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b512a:	2900      	cmp	r1, #0
   b512c:	d139      	bne.n	b51a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b512e:	6873      	ldr	r3, [r6, #4]
   b5130:	2b02      	cmp	r3, #2
   b5132:	d003      	beq.n	b513c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5134:	2b0a      	cmp	r3, #10
   b5136:	d011      	beq.n	b515c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5138:	69f6      	ldr	r6, [r6, #28]
   b513a:	e7f4      	b.n	b5126 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b513c:	f1b8 0f00 	cmp.w	r8, #0
   b5140:	d0fa      	beq.n	b5138 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5142:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5144:	a806      	add	r0, sp, #24
   b5146:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5148:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b514a:	f7ff ff71 	bl	b5030 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b514e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5150:	1d3c      	adds	r4, r7, #4
   b5152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5154:	682b      	ldr	r3, [r5, #0]
   b5156:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5158:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b515a:	e7ed      	b.n	b5138 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b515c:	f1b9 0f00 	cmp.w	r9, #0
   b5160:	d0ea      	beq.n	b5138 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5162:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5164:	2210      	movs	r2, #16
   b5166:	a801      	add	r0, sp, #4
   b5168:	f000 fc71 	bl	b5a4e <memset>
                    a.v = 6;
   b516c:	2306      	movs	r3, #6
   b516e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5172:	ad01      	add	r5, sp, #4
   b5174:	f104 0308 	add.w	r3, r4, #8
   b5178:	3418      	adds	r4, #24
   b517a:	6818      	ldr	r0, [r3, #0]
   b517c:	6859      	ldr	r1, [r3, #4]
   b517e:	462a      	mov	r2, r5
   b5180:	c203      	stmia	r2!, {r0, r1}
   b5182:	3308      	adds	r3, #8
   b5184:	42a3      	cmp	r3, r4
   b5186:	4615      	mov	r5, r2
   b5188:	d1f7      	bne.n	b517a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b518a:	a901      	add	r1, sp, #4
   b518c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b518e:	ad07      	add	r5, sp, #28
   b5190:	f7ff ff2e 	bl	b4ff0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5196:	1d3c      	adds	r4, r7, #4
   b5198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b519a:	682b      	ldr	r3, [r5, #0]
   b519c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b519e:	4649      	mov	r1, r9
   b51a0:	e7ca      	b.n	b5138 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b51a2:	9800      	ldr	r0, [sp, #0]
   b51a4:	f7ff fcd0 	bl	b4b48 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b51a8:	4638      	mov	r0, r7
   b51aa:	b015      	add	sp, #84	; 0x54
   b51ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b51b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b51b0:	4b02      	ldr	r3, [pc, #8]	; (b51bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b51b2:	4a03      	ldr	r2, [pc, #12]	; (b51c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b51b4:	601a      	str	r2, [r3, #0]
   b51b6:	2200      	movs	r2, #0
   b51b8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b51ba:	4770      	bx	lr
   b51bc:	2003e6c8 	.word	0x2003e6c8
   b51c0:	000b5f58 	.word	0x000b5f58

000b51c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b51c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51c6:	4606      	mov	r6, r0
   b51c8:	460d      	mov	r5, r1
  size_t n = 0;
   b51ca:	188f      	adds	r7, r1, r2
   b51cc:	2400      	movs	r4, #0
  while (size--) {
   b51ce:	42bd      	cmp	r5, r7
   b51d0:	d00c      	beq.n	b51ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b51d2:	6833      	ldr	r3, [r6, #0]
   b51d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b51d8:	689b      	ldr	r3, [r3, #8]
   b51da:	4630      	mov	r0, r6
   b51dc:	4798      	blx	r3
     if (chunk>=0)
   b51de:	1e03      	subs	r3, r0, #0
   b51e0:	db01      	blt.n	b51e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b51e2:	441c      	add	r4, r3
  while (size--) {
   b51e4:	e7f3      	b.n	b51ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b51e6:	2c00      	cmp	r4, #0
   b51e8:	bf08      	it	eq
   b51ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b51ec:	4620      	mov	r0, r4
   b51ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b51f0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b51f0:	b513      	push	{r0, r1, r4, lr}
   b51f2:	4604      	mov	r4, r0
    }
   b51f4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b51f6:	b159      	cbz	r1, b5210 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b51f8:	9101      	str	r1, [sp, #4]
   b51fa:	f7fe ff0f 	bl	b401c <strlen>
   b51fe:	6823      	ldr	r3, [r4, #0]
   b5200:	9901      	ldr	r1, [sp, #4]
   b5202:	68db      	ldr	r3, [r3, #12]
   b5204:	4602      	mov	r2, r0
   b5206:	4620      	mov	r0, r4
    }
   b5208:	b002      	add	sp, #8
   b520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b520e:	4718      	bx	r3
    }
   b5210:	b002      	add	sp, #8
   b5212:	bd10      	pop	{r4, pc}

000b5214 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5214:	6803      	ldr	r3, [r0, #0]
   b5216:	689b      	ldr	r3, [r3, #8]
   b5218:	4718      	bx	r3

000b521a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b521a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b521c:	210d      	movs	r1, #13
{
   b521e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5220:	f7ff fff8 	bl	b5214 <_ZN5Print5printEc>
  n += print('\n');
   b5224:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5226:	4604      	mov	r4, r0
  n += print('\n');
   b5228:	4628      	mov	r0, r5
   b522a:	f7ff fff3 	bl	b5214 <_ZN5Print5printEc>
  return n;
}
   b522e:	4420      	add	r0, r4
   b5230:	bd38      	pop	{r3, r4, r5, pc}

000b5232 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5232:	b538      	push	{r3, r4, r5, lr}
   b5234:	4605      	mov	r5, r0
  return write(str);
   b5236:	f7ff ffdb 	bl	b51f0 <_ZN5Print5writeEPKc>
   b523a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b523c:	4628      	mov	r0, r5
   b523e:	f7ff ffec 	bl	b521a <_ZN5Print7printlnEv>
  return n;
}
   b5242:	4420      	add	r0, r4
   b5244:	bd38      	pop	{r3, r4, r5, pc}

000b5246 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5246:	b530      	push	{r4, r5, lr}
   b5248:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b524a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b524c:	2a01      	cmp	r2, #1
  *str = '\0';
   b524e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5252:	bf98      	it	ls
   b5254:	220a      	movls	r2, #10
   b5256:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5258:	460d      	mov	r5, r1
   b525a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b525e:	fb01 5312 	mls	r3, r1, r2, r5
   b5262:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5266:	2b09      	cmp	r3, #9
   b5268:	bf94      	ite	ls
   b526a:	3330      	addls	r3, #48	; 0x30
   b526c:	3337      	addhi	r3, #55	; 0x37
   b526e:	b2db      	uxtb	r3, r3
  } while(n);
   b5270:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5272:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5276:	d9ef      	bls.n	b5258 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5278:	4621      	mov	r1, r4
   b527a:	f7ff ffb9 	bl	b51f0 <_ZN5Print5writeEPKc>
}
   b527e:	b00b      	add	sp, #44	; 0x2c
   b5280:	bd30      	pop	{r4, r5, pc}

000b5282 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5286:	b086      	sub	sp, #24
   b5288:	af00      	add	r7, sp, #0
   b528a:	4605      	mov	r5, r0
   b528c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b528e:	1d38      	adds	r0, r7, #4
   b5290:	2114      	movs	r1, #20
{
   b5292:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5294:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5296:	f7ff fd83 	bl	b4da0 <vsnprintf>

    if (n<bufsize)
   b529a:	2813      	cmp	r0, #19
   b529c:	d80e      	bhi.n	b52bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b529e:	1d39      	adds	r1, r7, #4
   b52a0:	4628      	mov	r0, r5
   b52a2:	f7ff ffa5 	bl	b51f0 <_ZN5Print5writeEPKc>
   b52a6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b52a8:	b11e      	cbz	r6, b52b2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b52aa:	4628      	mov	r0, r5
   b52ac:	f7ff ffb5 	bl	b521a <_ZN5Print7printlnEv>
   b52b0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b52b2:	4620      	mov	r0, r4
   b52b4:	3718      	adds	r7, #24
   b52b6:	46bd      	mov	sp, r7
   b52b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b52bc:	f100 0308 	add.w	r3, r0, #8
   b52c0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b52c4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b52c6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b52ca:	4622      	mov	r2, r4
   b52cc:	1c41      	adds	r1, r0, #1
   b52ce:	683b      	ldr	r3, [r7, #0]
   b52d0:	4668      	mov	r0, sp
   b52d2:	f7ff fd65 	bl	b4da0 <vsnprintf>
  return write(str);
   b52d6:	4669      	mov	r1, sp
   b52d8:	4628      	mov	r0, r5
   b52da:	f7ff ff89 	bl	b51f0 <_ZN5Print5writeEPKc>
   b52de:	4604      	mov	r4, r0
   b52e0:	46c5      	mov	sp, r8
   b52e2:	e7e1      	b.n	b52a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b52e4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b52e4:	4b01      	ldr	r3, [pc, #4]	; (b52ec <_GLOBAL__sub_I_RGB+0x8>)
   b52e6:	2200      	movs	r2, #0
   b52e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b52ea:	4770      	bx	lr
   b52ec:	2003e6d0 	.word	0x2003e6d0

000b52f0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b52f0:	b510      	push	{r4, lr}
   b52f2:	4604      	mov	r4, r0
   b52f4:	4608      	mov	r0, r1
{
    _spi = spi;
   b52f6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b52f8:	f7ff fc36 	bl	b4b68 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b52fc:	2300      	movs	r3, #0
   b52fe:	6063      	str	r3, [r4, #4]
}
   b5300:	4620      	mov	r0, r4
   b5302:	bd10      	pop	{r4, pc}

000b5304 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5304:	4b05      	ldr	r3, [pc, #20]	; (b531c <_GLOBAL__sub_I_System+0x18>)
   b5306:	2202      	movs	r2, #2
   b5308:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b530a:	4b05      	ldr	r3, [pc, #20]	; (b5320 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b530c:	4a05      	ldr	r2, [pc, #20]	; (b5324 <_GLOBAL__sub_I_System+0x20>)
   b530e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5310:	2000      	movs	r0, #0
   b5312:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5316:	f7ff bca7 	b.w	b4c68 <set_system_mode>
   b531a:	bf00      	nop
   b531c:	2003e6ec 	.word	0x2003e6ec
   b5320:	2003e6e0 	.word	0x2003e6e0
   b5324:	ffff0000 	.word	0xffff0000

000b5328 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5328:	4b02      	ldr	r3, [pc, #8]	; (b5334 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b532a:	681a      	ldr	r2, [r3, #0]
   b532c:	4b02      	ldr	r3, [pc, #8]	; (b5338 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b532e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5330:	4770      	bx	lr
   b5332:	bf00      	nop
   b5334:	2003e578 	.word	0x2003e578
   b5338:	2003e6f0 	.word	0x2003e6f0

000b533c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b533c:	4770      	bx	lr

000b533e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b533e:	7441      	strb	r1, [r0, #17]
}
   b5340:	4770      	bx	lr

000b5342 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5342:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5344:	7c00      	ldrb	r0, [r0, #16]
   b5346:	f7ff fc4f 	bl	b4be8 <hal_usart_available_data_for_write>
}
   b534a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b534e:	bd08      	pop	{r3, pc}

000b5350 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5350:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5352:	7c00      	ldrb	r0, [r0, #16]
   b5354:	f7ff fc20 	bl	b4b98 <hal_usart_available>
}
   b5358:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b535c:	bd08      	pop	{r3, pc}

000b535e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b535e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5360:	7c00      	ldrb	r0, [r0, #16]
   b5362:	f7ff fc29 	bl	b4bb8 <hal_usart_peek>
}
   b5366:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b536a:	bd08      	pop	{r3, pc}

000b536c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b536c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b536e:	7c00      	ldrb	r0, [r0, #16]
   b5370:	f7ff fc1a 	bl	b4ba8 <hal_usart_read>
}
   b5374:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5378:	bd08      	pop	{r3, pc}

000b537a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b537a:	7c00      	ldrb	r0, [r0, #16]
   b537c:	f7ff bc24 	b.w	b4bc8 <hal_usart_flush>

000b5380 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5380:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5382:	7c45      	ldrb	r5, [r0, #17]
{
   b5384:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5386:	b12d      	cbz	r5, b5394 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5388:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b538a:	b003      	add	sp, #12
   b538c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5390:	f7ff bbfa 	b.w	b4b88 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5394:	7c00      	ldrb	r0, [r0, #16]
   b5396:	9101      	str	r1, [sp, #4]
   b5398:	f7ff fc26 	bl	b4be8 <hal_usart_available_data_for_write>
   b539c:	2800      	cmp	r0, #0
   b539e:	9901      	ldr	r1, [sp, #4]
   b53a0:	dcf2      	bgt.n	b5388 <_ZN11USARTSerial5writeEh+0x8>
}
   b53a2:	4628      	mov	r0, r5
   b53a4:	b003      	add	sp, #12
   b53a6:	bd30      	pop	{r4, r5, pc}

000b53a8 <_ZN11USARTSerialD0Ev>:
   b53a8:	b510      	push	{r4, lr}
   b53aa:	2114      	movs	r1, #20
   b53ac:	4604      	mov	r4, r0
   b53ae:	f7fe fe7c 	bl	b40aa <_ZdlPvj>
   b53b2:	4620      	mov	r0, r4
   b53b4:	bd10      	pop	{r4, pc}
	...

000b53b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b53b8:	b510      	push	{r4, lr}
   b53ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53be:	4604      	mov	r4, r0
   b53c0:	4608      	mov	r0, r1
   b53c2:	4611      	mov	r1, r2
   b53c4:	2200      	movs	r2, #0
   b53c6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53ca:	4b04      	ldr	r3, [pc, #16]	; (b53dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b53cc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b53ce:	2301      	movs	r3, #1
  _serial = serial;
   b53d0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b53d2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b53d4:	f7ff fc10 	bl	b4bf8 <hal_usart_init_ex>
}
   b53d8:	4620      	mov	r0, r4
   b53da:	bd10      	pop	{r4, pc}
   b53dc:	000b5fb0 	.word	0x000b5fb0

000b53e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b53e0:	7441      	strb	r1, [r0, #17]
}
   b53e2:	4770      	bx	lr

000b53e4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53e4:	4770      	bx	lr

000b53e6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b53e6:	4770      	bx	lr

000b53e8 <_ZN9USBSerial4readEv>:
{
   b53e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b53ea:	2100      	movs	r1, #0
   b53ec:	7c00      	ldrb	r0, [r0, #16]
   b53ee:	f7ff fc23 	bl	b4c38 <HAL_USB_USART_Receive_Data>
}
   b53f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b53f6:	bd08      	pop	{r3, pc}

000b53f8 <_ZN9USBSerial4peekEv>:
{
   b53f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b53fa:	2101      	movs	r1, #1
   b53fc:	7c00      	ldrb	r0, [r0, #16]
   b53fe:	f7ff fc1b 	bl	b4c38 <HAL_USB_USART_Receive_Data>
}
   b5402:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5406:	bd08      	pop	{r3, pc}

000b5408 <_ZN9USBSerial17availableForWriteEv>:
{
   b5408:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b540a:	7c00      	ldrb	r0, [r0, #16]
   b540c:	f7ff fc0c 	bl	b4c28 <HAL_USB_USART_Available_Data_For_Write>
}
   b5410:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5414:	bd08      	pop	{r3, pc}

000b5416 <_ZN9USBSerial9availableEv>:
{
   b5416:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5418:	7c00      	ldrb	r0, [r0, #16]
   b541a:	f7ff fbfd 	bl	b4c18 <HAL_USB_USART_Available_Data>
}
   b541e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5422:	bd08      	pop	{r3, pc}

000b5424 <_ZN9USBSerial5writeEh>:
{
   b5424:	b513      	push	{r0, r1, r4, lr}
   b5426:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5428:	7c00      	ldrb	r0, [r0, #16]
{
   b542a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b542c:	f7ff fbfc 	bl	b4c28 <HAL_USB_USART_Available_Data_For_Write>
   b5430:	2800      	cmp	r0, #0
   b5432:	9901      	ldr	r1, [sp, #4]
   b5434:	dc01      	bgt.n	b543a <_ZN9USBSerial5writeEh+0x16>
   b5436:	7c60      	ldrb	r0, [r4, #17]
   b5438:	b120      	cbz	r0, b5444 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b543a:	7c20      	ldrb	r0, [r4, #16]
   b543c:	f7ff fc04 	bl	b4c48 <HAL_USB_USART_Send_Data>
   b5440:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5444:	b002      	add	sp, #8
   b5446:	bd10      	pop	{r4, pc}

000b5448 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5448:	7c00      	ldrb	r0, [r0, #16]
   b544a:	f7ff bc05 	b.w	b4c58 <HAL_USB_USART_Flush_Data>

000b544e <_ZN9USBSerialD0Ev>:
   b544e:	b510      	push	{r4, lr}
   b5450:	2114      	movs	r1, #20
   b5452:	4604      	mov	r4, r0
   b5454:	f7fe fe29 	bl	b40aa <_ZdlPvj>
   b5458:	4620      	mov	r0, r4
   b545a:	bd10      	pop	{r4, pc}

000b545c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b545c:	b510      	push	{r4, lr}
   b545e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5462:	4604      	mov	r4, r0
   b5464:	4608      	mov	r0, r1
   b5466:	2100      	movs	r1, #0
   b5468:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b546c:	4b04      	ldr	r3, [pc, #16]	; (b5480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b546e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5470:	2301      	movs	r3, #1
  _serial = serial;
   b5472:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5474:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5476:	4611      	mov	r1, r2
   b5478:	f7ff fbc6 	bl	b4c08 <HAL_USB_USART_Init>
}
   b547c:	4620      	mov	r0, r4
   b547e:	bd10      	pop	{r4, pc}
   b5480:	000b5fe0 	.word	0x000b5fe0

000b5484 <_Z19acquireSerialBufferv>:
{
   b5484:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5486:	2214      	movs	r2, #20
{
   b5488:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b548a:	2100      	movs	r1, #0
   b548c:	f000 fadf 	bl	b5a4e <memset>
}
   b5490:	4620      	mov	r0, r4
   b5492:	bd10      	pop	{r4, pc}

000b5494 <_Z16_fetch_usbserialv>:
{
   b5494:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5496:	4c0f      	ldr	r4, [pc, #60]	; (b54d4 <_Z16_fetch_usbserialv+0x40>)
{
   b5498:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b549a:	a803      	add	r0, sp, #12
   b549c:	f7ff fff2 	bl	b5484 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54a0:	7821      	ldrb	r1, [r4, #0]
   b54a2:	f3bf 8f5b 	dmb	ish
   b54a6:	f011 0101 	ands.w	r1, r1, #1
   b54aa:	d10f      	bne.n	b54cc <_Z16_fetch_usbserialv+0x38>
   b54ac:	4620      	mov	r0, r4
   b54ae:	9101      	str	r1, [sp, #4]
   b54b0:	f7fe fdfd 	bl	b40ae <__cxa_guard_acquire>
   b54b4:	9901      	ldr	r1, [sp, #4]
   b54b6:	b148      	cbz	r0, b54cc <_Z16_fetch_usbserialv+0x38>
   b54b8:	aa03      	add	r2, sp, #12
   b54ba:	4807      	ldr	r0, [pc, #28]	; (b54d8 <_Z16_fetch_usbserialv+0x44>)
   b54bc:	f7ff ffce 	bl	b545c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b54c0:	4620      	mov	r0, r4
   b54c2:	f7fe fdf9 	bl	b40b8 <__cxa_guard_release>
   b54c6:	4805      	ldr	r0, [pc, #20]	; (b54dc <_Z16_fetch_usbserialv+0x48>)
   b54c8:	f000 fa93 	bl	b59f2 <atexit>
	return _usbserial;
}
   b54cc:	4802      	ldr	r0, [pc, #8]	; (b54d8 <_Z16_fetch_usbserialv+0x44>)
   b54ce:	b008      	add	sp, #32
   b54d0:	bd10      	pop	{r4, pc}
   b54d2:	bf00      	nop
   b54d4:	2003e6f4 	.word	0x2003e6f4
   b54d8:	2003e6f8 	.word	0x2003e6f8
   b54dc:	000b53e5 	.word	0x000b53e5

000b54e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b54e0:	2200      	movs	r2, #0
   b54e2:	6840      	ldr	r0, [r0, #4]
   b54e4:	4611      	mov	r1, r2
   b54e6:	f7ff bc03 	b.w	b4cf0 <network_ready>

000b54ea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b54ea:	2200      	movs	r2, #0
   b54ec:	6840      	ldr	r0, [r0, #4]
   b54ee:	4611      	mov	r1, r2
   b54f0:	f7ff bc1e 	b.w	b4d30 <network_listening>

000b54f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b54f4:	2200      	movs	r2, #0
   b54f6:	6840      	ldr	r0, [r0, #4]
   b54f8:	4611      	mov	r1, r2
   b54fa:	f7ff bc29 	b.w	b4d50 <network_get_listen_timeout>

000b54fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b54fe:	6840      	ldr	r0, [r0, #4]
   b5500:	2200      	movs	r2, #0
   b5502:	f7ff bc1d 	b.w	b4d40 <network_set_listen_timeout>

000b5506 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5506:	6840      	ldr	r0, [r0, #4]
   b5508:	2200      	movs	r2, #0
   b550a:	f081 0101 	eor.w	r1, r1, #1
   b550e:	f7ff bc07 	b.w	b4d20 <network_listen>

000b5512 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5512:	2300      	movs	r3, #0
   b5514:	6840      	ldr	r0, [r0, #4]
   b5516:	461a      	mov	r2, r3
   b5518:	4619      	mov	r1, r3
   b551a:	f7ff bbf9 	b.w	b4d10 <network_off>

000b551e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b551e:	2300      	movs	r3, #0
   b5520:	6840      	ldr	r0, [r0, #4]
   b5522:	461a      	mov	r2, r3
   b5524:	4619      	mov	r1, r3
   b5526:	f7ff bbeb 	b.w	b4d00 <network_on>

000b552a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b552a:	2200      	movs	r2, #0
   b552c:	6840      	ldr	r0, [r0, #4]
   b552e:	4611      	mov	r1, r2
   b5530:	f7ff bbce 	b.w	b4cd0 <network_connecting>

000b5534 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5534:	6840      	ldr	r0, [r0, #4]
   b5536:	2200      	movs	r2, #0
   b5538:	2102      	movs	r1, #2
   b553a:	f7ff bbd1 	b.w	b4ce0 <network_disconnect>

000b553e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b553e:	2300      	movs	r3, #0
   b5540:	6840      	ldr	r0, [r0, #4]
   b5542:	461a      	mov	r2, r3
   b5544:	f7ff bbbc 	b.w	b4cc0 <network_connect>

000b5548 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5548:	4b02      	ldr	r3, [pc, #8]	; (b5554 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b554a:	2204      	movs	r2, #4
   b554c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b554e:	4a02      	ldr	r2, [pc, #8]	; (b5558 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5550:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5552:	4770      	bx	lr
   b5554:	2003e70c 	.word	0x2003e70c
   b5558:	000b6010 	.word	0x000b6010

000b555c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b555c:	4b01      	ldr	r3, [pc, #4]	; (b5564 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b555e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5560:	4770      	bx	lr
   b5562:	bf00      	nop
   b5564:	2003e57c 	.word	0x2003e57c

000b5568 <serialEventRun>:
{
   b5568:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b556a:	4b0b      	ldr	r3, [pc, #44]	; (b5598 <serialEventRun+0x30>)
   b556c:	b143      	cbz	r3, b5580 <serialEventRun+0x18>
   b556e:	f7ff ff91 	bl	b5494 <_Z16_fetch_usbserialv>
   b5572:	6803      	ldr	r3, [r0, #0]
   b5574:	691b      	ldr	r3, [r3, #16]
   b5576:	4798      	blx	r3
   b5578:	2800      	cmp	r0, #0
   b557a:	dd01      	ble.n	b5580 <serialEventRun+0x18>
        serialEvent();
   b557c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5580:	4b06      	ldr	r3, [pc, #24]	; (b559c <serialEventRun+0x34>)
   b5582:	b143      	cbz	r3, b5596 <serialEventRun+0x2e>
   b5584:	f000 f95c 	bl	b5840 <_Z22__fetch_global_Serial1v>
   b5588:	6803      	ldr	r3, [r0, #0]
   b558a:	691b      	ldr	r3, [r3, #16]
   b558c:	4798      	blx	r3
   b558e:	2800      	cmp	r0, #0
   b5590:	dd01      	ble.n	b5596 <serialEventRun+0x2e>
        serialEvent1();
   b5592:	f3af 8000 	nop.w
}
   b5596:	bd08      	pop	{r3, pc}
	...

000b55a0 <_post_loop>:
{
   b55a0:	b508      	push	{r3, lr}
	serialEventRun();
   b55a2:	f7ff ffe1 	bl	b5568 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b55a6:	f7ff fa57 	bl	b4a58 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b55aa:	4b01      	ldr	r3, [pc, #4]	; (b55b0 <_post_loop+0x10>)
   b55ac:	6018      	str	r0, [r3, #0]
}
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	2003e728 	.word	0x2003e728

000b55b4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55b4:	4805      	ldr	r0, [pc, #20]	; (b55cc <_Z33system_initialize_user_backup_ramv+0x18>)
   b55b6:	4a06      	ldr	r2, [pc, #24]	; (b55d0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b55b8:	4906      	ldr	r1, [pc, #24]	; (b55d4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b55ba:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b55bc:	1a12      	subs	r2, r2, r0
   b55be:	f000 fa1e 	bl	b59fe <memcpy>
    __backup_sram_signature = signature;
   b55c2:	4b05      	ldr	r3, [pc, #20]	; (b55d8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b55c4:	4a05      	ldr	r2, [pc, #20]	; (b55dc <_Z33system_initialize_user_backup_ramv+0x28>)
   b55c6:	601a      	str	r2, [r3, #0]
}
   b55c8:	bd08      	pop	{r3, pc}
   b55ca:	bf00      	nop
   b55cc:	2003f400 	.word	0x2003f400
   b55d0:	2003f404 	.word	0x2003f404
   b55d4:	000b6268 	.word	0x000b6268
   b55d8:	2003f400 	.word	0x2003f400
   b55dc:	9a271c1e 	.word	0x9a271c1e

000b55e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b55e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b55e2:	2300      	movs	r3, #0
   b55e4:	9300      	str	r3, [sp, #0]
   b55e6:	461a      	mov	r2, r3
   b55e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b55ec:	f7ff fb56 	bl	b4c9c <system_ctrl_set_result>
}
   b55f0:	b003      	add	sp, #12
   b55f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b55f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b55f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b55fa:	8843      	ldrh	r3, [r0, #2]
   b55fc:	2b0a      	cmp	r3, #10
   b55fe:	d008      	beq.n	b5612 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5600:	2b50      	cmp	r3, #80	; 0x50
   b5602:	d10b      	bne.n	b561c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5604:	4b09      	ldr	r3, [pc, #36]	; (b562c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5606:	681b      	ldr	r3, [r3, #0]
   b5608:	b14b      	cbz	r3, b561e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b560a:	b003      	add	sp, #12
   b560c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5610:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5612:	f7ff ffe5 	bl	b55e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5616:	b003      	add	sp, #12
   b5618:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b561c:	2300      	movs	r3, #0
   b561e:	9300      	str	r3, [sp, #0]
   b5620:	461a      	mov	r2, r3
   b5622:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5626:	f7ff fb39 	bl	b4c9c <system_ctrl_set_result>
}
   b562a:	e7f4      	b.n	b5616 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b562c:	2003e718 	.word	0x2003e718

000b5630 <module_user_init_hook>:
{
   b5630:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5632:	4812      	ldr	r0, [pc, #72]	; (b567c <module_user_init_hook+0x4c>)
   b5634:	2100      	movs	r1, #0
   b5636:	f7ff fbcb 	bl	b4dd0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b563a:	4b11      	ldr	r3, [pc, #68]	; (b5680 <module_user_init_hook+0x50>)
   b563c:	681a      	ldr	r2, [r3, #0]
   b563e:	4b11      	ldr	r3, [pc, #68]	; (b5684 <module_user_init_hook+0x54>)
   b5640:	429a      	cmp	r2, r3
   b5642:	4b11      	ldr	r3, [pc, #68]	; (b5688 <module_user_init_hook+0x58>)
   b5644:	bf0c      	ite	eq
   b5646:	2201      	moveq	r2, #1
   b5648:	2200      	movne	r2, #0
   b564a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b564c:	d001      	beq.n	b5652 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b564e:	f7ff ffb1 	bl	b55b4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5652:	f7ff f9f9 	bl	b4a48 <HAL_RNG_GetRandomNumber>
   b5656:	4604      	mov	r4, r0
    srand(seed);
   b5658:	f000 fa02 	bl	b5a60 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b565c:	4b0b      	ldr	r3, [pc, #44]	; (b568c <module_user_init_hook+0x5c>)
   b565e:	b113      	cbz	r3, b5666 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5660:	4620      	mov	r0, r4
   b5662:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5666:	2100      	movs	r1, #0
   b5668:	4808      	ldr	r0, [pc, #32]	; (b568c <module_user_init_hook+0x5c>)
   b566a:	f7ff fb21 	bl	b4cb0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b566e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5672:	4807      	ldr	r0, [pc, #28]	; (b5690 <module_user_init_hook+0x60>)
   b5674:	2100      	movs	r1, #0
   b5676:	f7ff bb07 	b.w	b4c88 <system_ctrl_set_app_request_handler>
   b567a:	bf00      	nop
   b567c:	000b555d 	.word	0x000b555d
   b5680:	2003f400 	.word	0x2003f400
   b5684:	9a271c1e 	.word	0x9a271c1e
   b5688:	2003e714 	.word	0x2003e714
   b568c:	00000000 	.word	0x00000000
   b5690:	000b55f9 	.word	0x000b55f9

000b5694 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5694:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5696:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5698:	d902      	bls.n	b56a0 <pinAvailable+0xc>
    return false;
   b569a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b569c:	b002      	add	sp, #8
   b569e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b56a0:	f1a0 030b 	sub.w	r3, r0, #11
   b56a4:	2b02      	cmp	r3, #2
   b56a6:	d81a      	bhi.n	b56de <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b56a8:	4c17      	ldr	r4, [pc, #92]	; (b5708 <pinAvailable+0x74>)
   b56aa:	7821      	ldrb	r1, [r4, #0]
   b56ac:	f3bf 8f5b 	dmb	ish
   b56b0:	f011 0101 	ands.w	r1, r1, #1
   b56b4:	d10b      	bne.n	b56ce <pinAvailable+0x3a>
   b56b6:	4620      	mov	r0, r4
   b56b8:	9101      	str	r1, [sp, #4]
   b56ba:	f7fe fcf8 	bl	b40ae <__cxa_guard_acquire>
   b56be:	9901      	ldr	r1, [sp, #4]
   b56c0:	b128      	cbz	r0, b56ce <pinAvailable+0x3a>
   b56c2:	4812      	ldr	r0, [pc, #72]	; (b570c <pinAvailable+0x78>)
   b56c4:	f7ff fe14 	bl	b52f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b56c8:	4620      	mov	r0, r4
   b56ca:	f7fe fcf5 	bl	b40b8 <__cxa_guard_release>
   b56ce:	4b0f      	ldr	r3, [pc, #60]	; (b570c <pinAvailable+0x78>)
   b56d0:	7818      	ldrb	r0, [r3, #0]
   b56d2:	f7ff fa51 	bl	b4b78 <hal_spi_is_enabled>
   b56d6:	2800      	cmp	r0, #0
   b56d8:	d1df      	bne.n	b569a <pinAvailable+0x6>
  return true; // 'pin' is available
   b56da:	2001      	movs	r0, #1
   b56dc:	e7de      	b.n	b569c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b56de:	2801      	cmp	r0, #1
   b56e0:	d809      	bhi.n	b56f6 <pinAvailable+0x62>
   b56e2:	f000 f86d 	bl	b57c0 <_Z19__fetch_global_Wirev>
   b56e6:	2100      	movs	r1, #0
   b56e8:	7c00      	ldrb	r0, [r0, #16]
   b56ea:	f7ff fa15 	bl	b4b18 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b56ee:	f080 0001 	eor.w	r0, r0, #1
   b56f2:	b2c0      	uxtb	r0, r0
   b56f4:	e7d2      	b.n	b569c <pinAvailable+0x8>
   b56f6:	3809      	subs	r0, #9
   b56f8:	2801      	cmp	r0, #1
   b56fa:	d8ee      	bhi.n	b56da <pinAvailable+0x46>
   b56fc:	f000 f8a0 	bl	b5840 <_Z22__fetch_global_Serial1v>
   b5700:	7c00      	ldrb	r0, [r0, #16]
   b5702:	f7ff fa69 	bl	b4bd8 <hal_usart_is_enabled>
   b5706:	e7f2      	b.n	b56ee <pinAvailable+0x5a>
   b5708:	2003e71c 	.word	0x2003e71c
   b570c:	2003e720 	.word	0x2003e720

000b5710 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5710:	2823      	cmp	r0, #35	; 0x23
{
   b5712:	b538      	push	{r3, r4, r5, lr}
   b5714:	4604      	mov	r4, r0
   b5716:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5718:	d80a      	bhi.n	b5730 <pinMode+0x20>
   b571a:	29ff      	cmp	r1, #255	; 0xff
   b571c:	d008      	beq.n	b5730 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b571e:	f7ff ffb9 	bl	b5694 <pinAvailable>
   b5722:	b128      	cbz	r0, b5730 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5724:	4629      	mov	r1, r5
   b5726:	4620      	mov	r0, r4
}
   b5728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b572c:	f7ff b99c 	b.w	b4a68 <hal_gpio_mode>
}
   b5730:	bd38      	pop	{r3, r4, r5, pc}

000b5732 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5732:	b538      	push	{r3, r4, r5, lr}
   b5734:	4604      	mov	r4, r0
   b5736:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b5738:	f7ff f99e 	bl	b4a78 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b573c:	28ff      	cmp	r0, #255	; 0xff
   b573e:	d010      	beq.n	b5762 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5740:	2806      	cmp	r0, #6
   b5742:	d804      	bhi.n	b574e <digitalWrite+0x1c>
   b5744:	234d      	movs	r3, #77	; 0x4d
   b5746:	fa23 f000 	lsr.w	r0, r3, r0
   b574a:	07c3      	lsls	r3, r0, #31
   b574c:	d409      	bmi.n	b5762 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b574e:	4620      	mov	r0, r4
   b5750:	f7ff ffa0 	bl	b5694 <pinAvailable>
   b5754:	b128      	cbz	r0, b5762 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b5756:	4629      	mov	r1, r5
   b5758:	4620      	mov	r0, r4
}
   b575a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b575e:	f7ff b993 	b.w	b4a88 <hal_gpio_write>
}
   b5762:	bd38      	pop	{r3, r4, r5, pc}

000b5764 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b5764:	b510      	push	{r4, lr}
   b5766:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b5768:	f7ff f986 	bl	b4a78 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b576c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b576e:	b2db      	uxtb	r3, r3
   b5770:	2b01      	cmp	r3, #1
   b5772:	d908      	bls.n	b5786 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5774:	4620      	mov	r0, r4
   b5776:	f7ff ff8d 	bl	b5694 <pinAvailable>
   b577a:	b120      	cbz	r0, b5786 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b577c:	4620      	mov	r0, r4
}
   b577e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b5782:	f7ff b989 	b.w	b4a98 <hal_gpio_read>
}
   b5786:	2000      	movs	r0, #0
   b5788:	bd10      	pop	{r4, pc}

000b578a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b578a:	4770      	bx	lr

000b578c <_Z17acquireWireBufferv>:
{
   b578c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b578e:	4b0a      	ldr	r3, [pc, #40]	; (b57b8 <_Z17acquireWireBufferv+0x2c>)
   b5790:	6003      	str	r3, [r0, #0]
   b5792:	2301      	movs	r3, #1
{
   b5794:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5796:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5798:	4908      	ldr	r1, [pc, #32]	; (b57bc <_Z17acquireWireBufferv+0x30>)
   b579a:	2020      	movs	r0, #32
   b579c:	f000 f874 	bl	b5888 <_ZnajRKSt9nothrow_t>
	};
   b57a0:	2520      	movs	r5, #32
   b57a2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b57a4:	4905      	ldr	r1, [pc, #20]	; (b57bc <_Z17acquireWireBufferv+0x30>)
	};
   b57a6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b57a8:	4628      	mov	r0, r5
   b57aa:	f000 f86d 	bl	b5888 <_ZnajRKSt9nothrow_t>
	};
   b57ae:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b57b2:	4620      	mov	r0, r4
   b57b4:	bd38      	pop	{r3, r4, r5, pc}
   b57b6:	bf00      	nop
   b57b8:	00010018 	.word	0x00010018
   b57bc:	000b6044 	.word	0x000b6044

000b57c0 <_Z19__fetch_global_Wirev>:
{
   b57c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57c2:	4d0e      	ldr	r5, [pc, #56]	; (b57fc <_Z19__fetch_global_Wirev+0x3c>)
   b57c4:	7829      	ldrb	r1, [r5, #0]
   b57c6:	f3bf 8f5b 	dmb	ish
   b57ca:	f011 0401 	ands.w	r4, r1, #1
{
   b57ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57d0:	d111      	bne.n	b57f6 <_Z19__fetch_global_Wirev+0x36>
   b57d2:	4628      	mov	r0, r5
   b57d4:	f7fe fc6b 	bl	b40ae <__cxa_guard_acquire>
   b57d8:	b168      	cbz	r0, b57f6 <_Z19__fetch_global_Wirev+0x36>
   b57da:	4668      	mov	r0, sp
   b57dc:	f7ff ffd6 	bl	b578c <_Z17acquireWireBufferv>
   b57e0:	466a      	mov	r2, sp
   b57e2:	4621      	mov	r1, r4
   b57e4:	4806      	ldr	r0, [pc, #24]	; (b5800 <_Z19__fetch_global_Wirev+0x40>)
   b57e6:	f7ff fb71 	bl	b4ecc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b57ea:	4628      	mov	r0, r5
   b57ec:	f7fe fc64 	bl	b40b8 <__cxa_guard_release>
   b57f0:	4804      	ldr	r0, [pc, #16]	; (b5804 <_Z19__fetch_global_Wirev+0x44>)
   b57f2:	f000 f8fe 	bl	b59f2 <atexit>
	return wire;
}
   b57f6:	4802      	ldr	r0, [pc, #8]	; (b5800 <_Z19__fetch_global_Wirev+0x40>)
   b57f8:	b007      	add	sp, #28
   b57fa:	bd30      	pop	{r4, r5, pc}
   b57fc:	2003e72c 	.word	0x2003e72c
   b5800:	2003e730 	.word	0x2003e730
   b5804:	000b578b 	.word	0x000b578b

000b5808 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5808:	4770      	bx	lr
	...

000b580c <_Z20acquireSerial1Bufferv>:
{
   b580c:	b538      	push	{r3, r4, r5, lr}
   b580e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5810:	2514      	movs	r5, #20
   b5812:	462a      	mov	r2, r5
   b5814:	2100      	movs	r1, #0
   b5816:	f000 f91a 	bl	b5a4e <memset>
   b581a:	8025      	strh	r5, [r4, #0]
   b581c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b581e:	4907      	ldr	r1, [pc, #28]	; (b583c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5820:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5822:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5824:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5826:	f000 f82f 	bl	b5888 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b582a:	4904      	ldr	r1, [pc, #16]	; (b583c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b582c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b582e:	4628      	mov	r0, r5
   b5830:	f000 f82a 	bl	b5888 <_ZnajRKSt9nothrow_t>
    };
   b5834:	60e0      	str	r0, [r4, #12]
}
   b5836:	4620      	mov	r0, r4
   b5838:	bd38      	pop	{r3, r4, r5, pc}
   b583a:	bf00      	nop
   b583c:	000b6044 	.word	0x000b6044

000b5840 <_Z22__fetch_global_Serial1v>:
{
   b5840:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5842:	4d0e      	ldr	r5, [pc, #56]	; (b587c <_Z22__fetch_global_Serial1v+0x3c>)
   b5844:	7829      	ldrb	r1, [r5, #0]
   b5846:	f3bf 8f5b 	dmb	ish
   b584a:	f011 0401 	ands.w	r4, r1, #1
{
   b584e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5850:	d111      	bne.n	b5876 <_Z22__fetch_global_Serial1v+0x36>
   b5852:	4628      	mov	r0, r5
   b5854:	f7fe fc2b 	bl	b40ae <__cxa_guard_acquire>
   b5858:	b168      	cbz	r0, b5876 <_Z22__fetch_global_Serial1v+0x36>
   b585a:	a801      	add	r0, sp, #4
   b585c:	f7ff ffd6 	bl	b580c <_Z20acquireSerial1Bufferv>
   b5860:	aa01      	add	r2, sp, #4
   b5862:	4621      	mov	r1, r4
   b5864:	4806      	ldr	r0, [pc, #24]	; (b5880 <_Z22__fetch_global_Serial1v+0x40>)
   b5866:	f7ff fda7 	bl	b53b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b586a:	4628      	mov	r0, r5
   b586c:	f7fe fc24 	bl	b40b8 <__cxa_guard_release>
   b5870:	4804      	ldr	r0, [pc, #16]	; (b5884 <_Z22__fetch_global_Serial1v+0x44>)
   b5872:	f000 f8be 	bl	b59f2 <atexit>
    return serial1;
}
   b5876:	4802      	ldr	r0, [pc, #8]	; (b5880 <_Z22__fetch_global_Serial1v+0x40>)
   b5878:	b007      	add	sp, #28
   b587a:	bd30      	pop	{r4, r5, pc}
   b587c:	2003e744 	.word	0x2003e744
   b5880:	2003e748 	.word	0x2003e748
   b5884:	000b5809 	.word	0x000b5809

000b5888 <_ZnajRKSt9nothrow_t>:
   b5888:	f7fe bc0d 	b.w	b40a6 <_Znaj>

000b588c <_ZSt19__throw_logic_errorPKc>:
   b588c:	b508      	push	{r3, lr}
   b588e:	f7ff fa8f 	bl	b4db0 <abort>

000b5892 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b5892:	b40f      	push	{r0, r1, r2, r3}
   b5894:	b580      	push	{r7, lr}
   b5896:	b084      	sub	sp, #16
   b5898:	af00      	add	r7, sp, #0
   b589a:	f107 0418 	add.w	r4, r7, #24
   b589e:	f854 2b04 	ldr.w	r2, [r4], #4
   b58a2:	607a      	str	r2, [r7, #4]
   b58a4:	4610      	mov	r0, r2
   b58a6:	f7fe fbb9 	bl	b401c <strlen>
   b58aa:	f200 2307 	addw	r3, r0, #519	; 0x207
   b58ae:	f023 0307 	bic.w	r3, r3, #7
   b58b2:	ebad 0d03 	sub.w	sp, sp, r3
   b58b6:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b58ba:	687a      	ldr	r2, [r7, #4]
   b58bc:	60fc      	str	r4, [r7, #12]
   b58be:	4623      	mov	r3, r4
   b58c0:	4668      	mov	r0, sp
   b58c2:	f000 f855 	bl	b5970 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b58c6:	f7ff fa73 	bl	b4db0 <abort>
	...

000b58cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b58cc:	b580      	push	{r7, lr}
   b58ce:	b09c      	sub	sp, #112	; 0x70
   b58d0:	4606      	mov	r6, r0
   b58d2:	af00      	add	r7, sp, #0
   b58d4:	460c      	mov	r4, r1
   b58d6:	1ba4      	subs	r4, r4, r6
   b58d8:	490e      	ldr	r1, [pc, #56]	; (b5914 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b58da:	2269      	movs	r2, #105	; 0x69
   b58dc:	1d38      	adds	r0, r7, #4
   b58de:	f000 f88e 	bl	b59fe <memcpy>
   b58e2:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b58e6:	f023 0307 	bic.w	r3, r3, #7
   b58ea:	ebad 0d03 	sub.w	sp, sp, r3
   b58ee:	466d      	mov	r5, sp
   b58f0:	2268      	movs	r2, #104	; 0x68
   b58f2:	1d39      	adds	r1, r7, #4
   b58f4:	4628      	mov	r0, r5
   b58f6:	f000 f882 	bl	b59fe <memcpy>
   b58fa:	4622      	mov	r2, r4
   b58fc:	4631      	mov	r1, r6
   b58fe:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b5902:	442c      	add	r4, r5
   b5904:	f000 f87b 	bl	b59fe <memcpy>
   b5908:	2300      	movs	r3, #0
   b590a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b590e:	4628      	mov	r0, r5
   b5910:	f7ff ffbc 	bl	b588c <_ZSt19__throw_logic_errorPKc>
   b5914:	000b6045 	.word	0x000b6045

000b5918 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b5918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b591c:	af00      	add	r7, sp, #0
   b591e:	b084      	sub	sp, #16
   b5920:	466d      	mov	r5, sp
   b5922:	f105 040c 	add.w	r4, r5, #12
   b5926:	f8df 8044 	ldr.w	r8, [pc, #68]	; b596c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b592a:	4623      	mov	r3, r4
   b592c:	f04f 0c0a 	mov.w	ip, #10
   b5930:	fbb2 f6fc 	udiv	r6, r2, ip
   b5934:	fb0c 2e16 	mls	lr, ip, r6, r2
   b5938:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b593c:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b5940:	4696      	mov	lr, r2
   b5942:	f1be 0f09 	cmp.w	lr, #9
   b5946:	4632      	mov	r2, r6
   b5948:	d8f2      	bhi.n	b5930 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b594a:	1ae4      	subs	r4, r4, r3
   b594c:	428c      	cmp	r4, r1
   b594e:	d809      	bhi.n	b5964 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b5950:	f1c4 030c 	rsb	r3, r4, #12
   b5954:	4622      	mov	r2, r4
   b5956:	18e9      	adds	r1, r5, r3
   b5958:	f000 f851 	bl	b59fe <memcpy>
   b595c:	4620      	mov	r0, r4
   b595e:	46bd      	mov	sp, r7
   b5960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5964:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5968:	e7f8      	b.n	b595c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b596a:	bf00      	nop
   b596c:	000b60ae 	.word	0x000b60ae

000b5970 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b5970:	3901      	subs	r1, #1
   b5972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5976:	4607      	mov	r7, r0
   b5978:	4615      	mov	r5, r2
   b597a:	eb00 0801 	add.w	r8, r0, r1
   b597e:	4604      	mov	r4, r0
   b5980:	782a      	ldrb	r2, [r5, #0]
   b5982:	b392      	cbz	r2, b59ea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b5984:	4544      	cmp	r4, r8
   b5986:	d22a      	bcs.n	b59de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b5988:	2a25      	cmp	r2, #37	; 0x25
   b598a:	d107      	bne.n	b599c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b598c:	786a      	ldrb	r2, [r5, #1]
   b598e:	2a73      	cmp	r2, #115	; 0x73
   b5990:	d009      	beq.n	b59a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b5992:	2a7a      	cmp	r2, #122	; 0x7a
   b5994:	d012      	beq.n	b59bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b5996:	2a25      	cmp	r2, #37	; 0x25
   b5998:	d100      	bne.n	b599c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b599a:	3501      	adds	r5, #1
   b599c:	f815 2b01 	ldrb.w	r2, [r5], #1
   b59a0:	f804 2b01 	strb.w	r2, [r4], #1
   b59a4:	e7ec      	b.n	b5980 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b59a6:	f853 2b04 	ldr.w	r2, [r3], #4
   b59aa:	3a01      	subs	r2, #1
   b59ac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b59b0:	b1c9      	cbz	r1, b59e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b59b2:	4544      	cmp	r4, r8
   b59b4:	d013      	beq.n	b59de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b59b6:	f804 1b01 	strb.w	r1, [r4], #1
   b59ba:	e7f7      	b.n	b59ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b59bc:	78aa      	ldrb	r2, [r5, #2]
   b59be:	2a75      	cmp	r2, #117	; 0x75
   b59c0:	d1ec      	bne.n	b599c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b59c2:	461e      	mov	r6, r3
   b59c4:	eba8 0104 	sub.w	r1, r8, r4
   b59c8:	f856 2b04 	ldr.w	r2, [r6], #4
   b59cc:	4620      	mov	r0, r4
   b59ce:	f7ff ffa3 	bl	b5918 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b59d2:	2800      	cmp	r0, #0
   b59d4:	dd03      	ble.n	b59de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b59d6:	4404      	add	r4, r0
   b59d8:	3503      	adds	r5, #3
   b59da:	4633      	mov	r3, r6
   b59dc:	e7d0      	b.n	b5980 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b59de:	4621      	mov	r1, r4
   b59e0:	4638      	mov	r0, r7
   b59e2:	f7ff ff73 	bl	b58cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b59e6:	3502      	adds	r5, #2
   b59e8:	e7ca      	b.n	b5980 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b59ea:	7022      	strb	r2, [r4, #0]
   b59ec:	1be0      	subs	r0, r4, r7
   b59ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b59f2 <atexit>:
   b59f2:	2300      	movs	r3, #0
   b59f4:	4601      	mov	r1, r0
   b59f6:	461a      	mov	r2, r3
   b59f8:	4618      	mov	r0, r3
   b59fa:	f000 b85f 	b.w	b5abc <__register_exitproc>

000b59fe <memcpy>:
   b59fe:	440a      	add	r2, r1
   b5a00:	4291      	cmp	r1, r2
   b5a02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5a06:	d100      	bne.n	b5a0a <memcpy+0xc>
   b5a08:	4770      	bx	lr
   b5a0a:	b510      	push	{r4, lr}
   b5a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5a10:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5a14:	4291      	cmp	r1, r2
   b5a16:	d1f9      	bne.n	b5a0c <memcpy+0xe>
   b5a18:	bd10      	pop	{r4, pc}

000b5a1a <memmove>:
   b5a1a:	4288      	cmp	r0, r1
   b5a1c:	b510      	push	{r4, lr}
   b5a1e:	eb01 0402 	add.w	r4, r1, r2
   b5a22:	d902      	bls.n	b5a2a <memmove+0x10>
   b5a24:	4284      	cmp	r4, r0
   b5a26:	4623      	mov	r3, r4
   b5a28:	d807      	bhi.n	b5a3a <memmove+0x20>
   b5a2a:	1e43      	subs	r3, r0, #1
   b5a2c:	42a1      	cmp	r1, r4
   b5a2e:	d008      	beq.n	b5a42 <memmove+0x28>
   b5a30:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5a34:	f803 2f01 	strb.w	r2, [r3, #1]!
   b5a38:	e7f8      	b.n	b5a2c <memmove+0x12>
   b5a3a:	4402      	add	r2, r0
   b5a3c:	4601      	mov	r1, r0
   b5a3e:	428a      	cmp	r2, r1
   b5a40:	d100      	bne.n	b5a44 <memmove+0x2a>
   b5a42:	bd10      	pop	{r4, pc}
   b5a44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b5a48:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b5a4c:	e7f7      	b.n	b5a3e <memmove+0x24>

000b5a4e <memset>:
   b5a4e:	4402      	add	r2, r0
   b5a50:	4603      	mov	r3, r0
   b5a52:	4293      	cmp	r3, r2
   b5a54:	d100      	bne.n	b5a58 <memset+0xa>
   b5a56:	4770      	bx	lr
   b5a58:	f803 1b01 	strb.w	r1, [r3], #1
   b5a5c:	e7f9      	b.n	b5a52 <memset+0x4>
	...

000b5a60 <srand>:
   b5a60:	b538      	push	{r3, r4, r5, lr}
   b5a62:	4b10      	ldr	r3, [pc, #64]	; (b5aa4 <srand+0x44>)
   b5a64:	681d      	ldr	r5, [r3, #0]
   b5a66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5a68:	4604      	mov	r4, r0
   b5a6a:	b9b3      	cbnz	r3, b5a9a <srand+0x3a>
   b5a6c:	2018      	movs	r0, #24
   b5a6e:	f7ff f987 	bl	b4d80 <malloc>
   b5a72:	4602      	mov	r2, r0
   b5a74:	63a8      	str	r0, [r5, #56]	; 0x38
   b5a76:	b920      	cbnz	r0, b5a82 <srand+0x22>
   b5a78:	4b0b      	ldr	r3, [pc, #44]	; (b5aa8 <srand+0x48>)
   b5a7a:	480c      	ldr	r0, [pc, #48]	; (b5aac <srand+0x4c>)
   b5a7c:	2142      	movs	r1, #66	; 0x42
   b5a7e:	f7ff f99f 	bl	b4dc0 <__assert_func>
   b5a82:	490b      	ldr	r1, [pc, #44]	; (b5ab0 <srand+0x50>)
   b5a84:	4b0b      	ldr	r3, [pc, #44]	; (b5ab4 <srand+0x54>)
   b5a86:	e9c0 1300 	strd	r1, r3, [r0]
   b5a8a:	4b0b      	ldr	r3, [pc, #44]	; (b5ab8 <srand+0x58>)
   b5a8c:	6083      	str	r3, [r0, #8]
   b5a8e:	230b      	movs	r3, #11
   b5a90:	8183      	strh	r3, [r0, #12]
   b5a92:	2100      	movs	r1, #0
   b5a94:	2001      	movs	r0, #1
   b5a96:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5a9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5a9c:	2200      	movs	r2, #0
   b5a9e:	611c      	str	r4, [r3, #16]
   b5aa0:	615a      	str	r2, [r3, #20]
   b5aa2:	bd38      	pop	{r3, r4, r5, pc}
   b5aa4:	2003e57c 	.word	0x2003e57c
   b5aa8:	000b60b9 	.word	0x000b60b9
   b5aac:	000b60d0 	.word	0x000b60d0
   b5ab0:	abcd330e 	.word	0xabcd330e
   b5ab4:	e66d1234 	.word	0xe66d1234
   b5ab8:	0005deec 	.word	0x0005deec

000b5abc <__register_exitproc>:
   b5abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5ac0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5b7c <__register_exitproc+0xc0>
   b5ac4:	4606      	mov	r6, r0
   b5ac6:	f8d8 0000 	ldr.w	r0, [r8]
   b5aca:	461f      	mov	r7, r3
   b5acc:	460d      	mov	r5, r1
   b5ace:	4691      	mov	r9, r2
   b5ad0:	f000 f856 	bl	b5b80 <__retarget_lock_acquire_recursive>
   b5ad4:	4b25      	ldr	r3, [pc, #148]	; (b5b6c <__register_exitproc+0xb0>)
   b5ad6:	681c      	ldr	r4, [r3, #0]
   b5ad8:	b934      	cbnz	r4, b5ae8 <__register_exitproc+0x2c>
   b5ada:	4c25      	ldr	r4, [pc, #148]	; (b5b70 <__register_exitproc+0xb4>)
   b5adc:	601c      	str	r4, [r3, #0]
   b5ade:	4b25      	ldr	r3, [pc, #148]	; (b5b74 <__register_exitproc+0xb8>)
   b5ae0:	b113      	cbz	r3, b5ae8 <__register_exitproc+0x2c>
   b5ae2:	681b      	ldr	r3, [r3, #0]
   b5ae4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5ae8:	6863      	ldr	r3, [r4, #4]
   b5aea:	2b1f      	cmp	r3, #31
   b5aec:	dd07      	ble.n	b5afe <__register_exitproc+0x42>
   b5aee:	f8d8 0000 	ldr.w	r0, [r8]
   b5af2:	f000 f847 	bl	b5b84 <__retarget_lock_release_recursive>
   b5af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5afe:	b34e      	cbz	r6, b5b54 <__register_exitproc+0x98>
   b5b00:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5b04:	b988      	cbnz	r0, b5b2a <__register_exitproc+0x6e>
   b5b06:	4b1c      	ldr	r3, [pc, #112]	; (b5b78 <__register_exitproc+0xbc>)
   b5b08:	b923      	cbnz	r3, b5b14 <__register_exitproc+0x58>
   b5b0a:	f8d8 0000 	ldr.w	r0, [r8]
   b5b0e:	f000 f838 	bl	b5b82 <__retarget_lock_release>
   b5b12:	e7f0      	b.n	b5af6 <__register_exitproc+0x3a>
   b5b14:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5b18:	f7ff f932 	bl	b4d80 <malloc>
   b5b1c:	2800      	cmp	r0, #0
   b5b1e:	d0f4      	beq.n	b5b0a <__register_exitproc+0x4e>
   b5b20:	2300      	movs	r3, #0
   b5b22:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5b26:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5b2a:	6863      	ldr	r3, [r4, #4]
   b5b2c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5b30:	2201      	movs	r2, #1
   b5b32:	409a      	lsls	r2, r3
   b5b34:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5b38:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5b3c:	4313      	orrs	r3, r2
   b5b3e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5b42:	2e02      	cmp	r6, #2
   b5b44:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5b48:	bf02      	ittt	eq
   b5b4a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5b4e:	4313      	orreq	r3, r2
   b5b50:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5b54:	6863      	ldr	r3, [r4, #4]
   b5b56:	f8d8 0000 	ldr.w	r0, [r8]
   b5b5a:	1c5a      	adds	r2, r3, #1
   b5b5c:	3302      	adds	r3, #2
   b5b5e:	6062      	str	r2, [r4, #4]
   b5b60:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5b64:	f000 f80e 	bl	b5b84 <__retarget_lock_release_recursive>
   b5b68:	2000      	movs	r0, #0
   b5b6a:	e7c6      	b.n	b5afa <__register_exitproc+0x3e>
   b5b6c:	2003e7e8 	.word	0x2003e7e8
   b5b70:	2003e75c 	.word	0x2003e75c
   b5b74:	00000000 	.word	0x00000000
   b5b78:	000b4d81 	.word	0x000b4d81
   b5b7c:	2003e5e0 	.word	0x2003e5e0

000b5b80 <__retarget_lock_acquire_recursive>:
   b5b80:	4770      	bx	lr

000b5b82 <__retarget_lock_release>:
   b5b82:	4770      	bx	lr

000b5b84 <__retarget_lock_release_recursive>:
   b5b84:	4770      	bx	lr

000b5b86 <link_code_end>:
	...

000b5b88 <dynalib_user>:
   b5b88:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b5b98:	0000 0000 6c43 6165 696e 676e 5320 7379     ....Cleaning Sys
   b5ba8:	6574 206d 203a 6e49 7469 6169 696c 697a     tem : Initializi
   b5bb8:	676e 4300 656c 6e61 6e69 2067 7953 7473     ng.Cleaning Syst
   b5bc8:	6d65 3a20 5320 7465 7075 4300 656c 6e61     em : Setup.Clean
   b5bd8:	6e69 2067 7953 7473 6d65 3a20 4420 6165     ing System : Dea
   b5be8:	7463 7669 7461 0065 6c43 6165 696e 676e     ctivate.Cleaning
   b5bf8:	5320 7379 6574 206d 203a 6553 2074 6341      System : Set Ac
   b5c08:	6974 6576 4320 6379 656c 4300 656c 6e61     tive Cycle.Clean
   b5c18:	6e69 2067 7953 7473 6d65 3a20 4c20 6f6f     ing System : Loo
   b5c28:	0070 7244 6961 206e 203a 6f4c 706f 4400     p.Drain : Loop.D
   b5c38:	6172 6e69 3a20 5320 7465 7075 4400 6172     rain : Setup.Dra
   b5c48:	6e69 3a20 4920 696e 6974 6c61 7a69 7461     in : Initializat
   b5c58:	6e69 0067                                   ing.

000b5c5c <_ZTV5Drain>:
	...
   b5c64:	4431 000b 441d 000b 4419 000b 4419 000b     1D...D...D...D..
   b5c74:	6e49 6a6a 6365 6974 6e6f 5020 6d75 2070     Injjection Pump 
   b5c84:	203a 6e49 6974 6c61 7a69 6e69 0067 6e49     : Intializing.In
   b5c94:	656a 7463 6f69 206e 7550 706d 3a20 5320     jection Pump : S
   b5ca4:	7465 7075 4900 6a6e 6365 6974 6e6f 5020     etup.Injection P
   b5cb4:	6d75 2070 203a 7554 6e72 4f20 6666 4900     ump : Turn Off.I
   b5cc4:	6a6e 6365 6974 6e6f 5020 6d75 2070 203a     njection Pump : 
   b5cd4:	7554 6e72 4f20 006e 6e49 6174 656b 5620     Turn On.Intake V
   b5ce4:	6c61 6576 3a20 4920 746e 6169 696c 697a     alve : Intializi
   b5cf4:	676e 4900 746e 6b61 2065 6156 766c 2065     ng.Intake Valve 
   b5d04:	203a 6553 7574 0070 6e49 6174 656b 5620     : Setup.Intake V
   b5d14:	6c61 6576 3a20 4f20 6570 006e 6e49 6174     alve : Open.Inta
   b5d24:	656b 5620 6c61 6576 3a20 4320 6f6c 6573     ke Valve : Close
   b5d34:	5200 6c65 7961 4420 7665 6369 2065 203a     .Relay Device : 
   b5d44:	6e49 7469 6169 696c 697a 676e 5200 6c65     Initializing.Rel
   b5d54:	7961 4420 7665 6369 2065 203a 6553 7574     ay Device : Setu
   b5d64:	0070 6552 616c 2079 6544 6976 6563 3a20     p.Relay Device :
   b5d74:	4320 6f6c 6573 5200 6c65 7961 4420 7665      Close.Relay Dev
   b5d84:	6369 2065 203a 704f 6e65 5700 7461 7265     ice : Open.Water
   b5d94:	4920 746e 6b61 2065 6f42 2078 203a 6c43      Intake Box : Cl
   b5da4:	736f 2065 6156 766c 0065 6157 6574 2072     ose Valve.Water 
   b5db4:	6e49 6174 656b 4220 786f 3a20 4f20 6570     Intake Box : Ope
   b5dc4:	206e 6156 766c 0065 6157 6574 2072 6e49     n Valve.Water In
   b5dd4:	6174 656b 4220 786f 203a 6944 6173 6c62     take Box: Disabl
   b5de4:	6465 5700 7461 7265 4920 746e 6b61 2065     ed.Water Intake 
   b5df4:	6f42 2078 203a 6e49 7469 6169 696c 697a     Box : Initializi
   b5e04:	676e 5300 6e65 6f73 2072 6977 6874 7020     ng.Sensor with p
   b5e14:	6e69 2520 2c64 6120 646e 7720 7461 7265     in %d, and water
   b5e24:	6c20 7665 6c65 2520 2064 7369 6920 646e      level %d is ind
   b5e34:	7865 2520 0064 6576 7463 726f 3a3a 4d5f     ex %d.vector::_M
   b5e44:	725f 6e61 6567 635f 6568 6b63 203a 5f5f     _range_check: __
   b5e54:	206e 7728 6968 6863 6920 2073 7a25 2975     n (which is %zu)
   b5e64:	3e20 203d 6874 7369 3e2d 6973 657a 2928      >= this->size()
   b5e74:	2820 6877 6369 2068 7369 2520 757a 0029      (which is %zu).
   b5e84:	6157 6574 2072 6e49 6174 656b 4220 786f     Water Intake Box
   b5e94:	3a20 4120 7463 7669 7461 0065 6157 6574      : Activate.Wate
   b5ea4:	2072 6e49 6174 656b 4220 786f 3a20 4c20     r Intake Box : L
   b5eb4:	6f6f 0070 6157 6574 2072 6e49 6174 656b     oop.Water Intake
   b5ec4:	4220 786f 3a20 5320 7465 7075 0000 0000      Box : Setup....

000b5ed4 <_ZTVN5spark13EthernetClassE>:
	...
   b5edc:	4e57 000b 4e4d 000b 4e43 000b 4e39 000b     WN..MN..CN..9N..
   b5eec:	4e2d 000b 4e21 000b 50a1 000b 50a9 000b     -N..!N...P...P..
   b5efc:	4e15 000b 4e0d 000b 4e03 000b 4df9 000b     .N...N...N...M..
   b5f0c:	50d9 000b                                   .P..

000b5f10 <_ZTV7TwoWire>:
	...
   b5f18:	4e75 000b 4ebf 000b 4e97 000b 4e77 000b     uN...N...N..wN..
   b5f28:	4e9f 000b 4ea7 000b 4eaf 000b 4eb7 000b     .N...N...N...N..

000b5f38 <_ZTV9IPAddress>:
	...
   b5f40:	4f71 000b 4f61 000b 4f63 000b 7061 0070     qO..aO..cO..app.

000b5f50 <_ZTVN5spark12NetworkClassE>:
	...
   b5f58:	5061 000b 506b 000b 5075 000b 507f 000b     aP..kP..uP...P..
   b5f68:	5089 000b 5095 000b 50a1 000b 50a9 000b     .P...P...P...P..
   b5f78:	50b1 000b 50bd 000b 50c5 000b 50cf 000b     .P...P...P...P..
   b5f88:	50d9 000b 5925 252d 2d6d 6425 2554 3a48     .P..%Y-%m-%dT%H:
   b5f98:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b5fa8 <_ZTV11USARTSerial>:
	...
   b5fb0:	533d 000b 53a9 000b 5381 000b 51c5 000b     =S...S...S...Q..
   b5fc0:	5351 000b 536d 000b 535f 000b 537b 000b     QS..mS.._S..{S..
   b5fd0:	533f 000b 5343 000b                         ?S..CS..

000b5fd8 <_ZTV9USBSerial>:
	...
   b5fe0:	53e7 000b 544f 000b 5425 000b 51c5 000b     .S..OT..%T...Q..
   b5ff0:	5417 000b 53e9 000b 53f9 000b 5449 000b     .T...S...S..IT..
   b6000:	5409 000b 53e1 000b                         .T...S..

000b6008 <_ZTVN5spark9WiFiClassE>:
	...
   b6010:	553f 000b 5535 000b 552b 000b 54e1 000b     ?U..5U..+U...T..
   b6020:	551f 000b 5513 000b 50a1 000b 50a9 000b     .U...U...P...P..
   b6030:	5507 000b 54ff 000b 54f5 000b 54eb 000b     .U...T...T...T..
   b6040:	50d9 000b                                   .P..

000b6044 <_ZSt7nothrow>:
   b6044:	6e00 746f 6520 6f6e 6775 2068 7073 6361     .not enough spac
   b6054:	2065 6f66 2072 6f66 6d72 7461 6520 7078     e for format exp
   b6064:	6e61 6973 6e6f 2820 6c50 6165 6573 7320     ansion (Please s
   b6074:	6275 696d 2074 7566 6c6c 6220 6775 7220     ubmit full bug r
   b6084:	7065 726f 2074 7461 6820 7474 7370 2f3a     eport at https:/
   b6094:	672f 6363 672e 756e 6f2e 6772 622f 6775     /gcc.gnu.org/bug
   b60a4:	2f73 3a29 200a 2020 0020 3130 3332 3534     s/):.    .012345
   b60b4:	3736 3938 5200 4545 544e 6d20 6c61 6f6c     6789.REENT mallo
   b60c4:	2063 7573 6363 6565 6564 0064 742f 706d     c succeeded./tmp
   b60d4:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b60e4:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b60f4:	3131 3432 315f 3036 3136 3038 3336 2f39     1124_1606180639/
   b6104:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6114:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6124:	646e 632e                                    nd.c.

000b6129 <link_const_data_end>:
   b6129:	00          	.byte	0x00
	...

000b612c <link_constructors_location>:
   b612c:	000b4119 	.word	0x000b4119
   b6130:	000b4de9 	.word	0x000b4de9
   b6134:	000b4e61 	.word	0x000b4e61
   b6138:	000b5051 	.word	0x000b5051
   b613c:	000b51b1 	.word	0x000b51b1
   b6140:	000b52e5 	.word	0x000b52e5
   b6144:	000b5305 	.word	0x000b5305
   b6148:	000b5329 	.word	0x000b5329
   b614c:	000b5549 	.word	0x000b5549
